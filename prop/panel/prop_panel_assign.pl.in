#!@PERLDB@
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_panel_assign.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script provides lists used by the prop_panel_create to
#     assign proposals to panels based on categories and propconflict output.
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw ($dbh %param %cats @catcodes 
	);

use strict;
use Getopt::Long;
use DBI;

# -------------------------- MAIN ----------------------------------
{
  my($str,$tmp,$cat,$ii,$stmp,$dsn);

  &parse_input;


  #database connection
  $stmp = "server=$param{S};database=proposal";
  $dsn = "DBI:Sybase:$stmp";
  $dbh = DBI->connect($dsn, $param{U}, $param{q}, {
        PrintError => 1,
        RaiseError => 1});
  if ( !defined $dbh) {
    exit 1;
  }

  open (DFILE,"< $param{i}") || 
	die "Unable to open $param{i} for reading.\n";
  print STDERR "processing $param{i} ...\n";
  while ($str = <DFILE> ){ 
    chomp($str);
    if ($str =~ /^ID/) {
      ($tmp,$tmp,$cat) = split(/=/,$str,3);
      $cat =~ s/ //g;
      $cats{$cat} = $cat;
    }
  }

  if ($param{l}) {
    $dbh->do("exec update_linked_propnum");
  }

  @catcodes = %cats;
  for ($ii=0;$ii<= $#catcodes;$ii+=2) {
    doquery($catcodes[$ii+1]);
  } 

}



# ----------------------------------------------------------
# ----------------------------------------------------------
sub doquery
{
  my($cats) = @_;
  my($sql,$fname);
  my($sth,@row,$ii,$str);

  $str = $cats;
  $str =~ s/,//g;
  $fname = $param{o} . "/assign_" . $str .".list";
  open (OFILE,"> $fname") || die "Unable to open $fname for writing.\n";
  print STDERR "processing $fname\n";
  
  $sql = qq(select proposal.proposal_id,proposal_number,
	axafusers..person_short.last,
	axafusers..person_short.first,
	axafusers..person_short.institution,
	proposal.type,
	proposal.linked_propnum
	from proposal,context,axafusers..person_short
	where proposal.ao_str = context.current_ao_str
	and proposal.status = "PROPOSED"
	and convert(int,substring(proposal_number,3,2)) in ($cats)
	and proposal.piid = axafusers..person_short.pers_id
	and type != "CAL"
	and joint not like "%-%"
	and (type != "ARCHIVE" or (type = "ARCHIVE" and linked_propnum is null))
	order by last,proposal_number);
	
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE "^%d^%s^%s^%s^%s^%s^%s^\n",@row;
  }

  # now get any archive proposals that are linked to proposals in this
  # panel 
  $sql = qq(select proposal.proposal_id,proposal_number,
	axafusers..person_short.last,
	axafusers..person_short.first,
	axafusers..person_short.institution,
	proposal.type,
	proposal.linked_propnum
	from proposal,context,axafusers..person_short
	where proposal.ao_str = context.current_ao_str
	and proposal.status = "PROPOSED"
	and proposal.piid = axafusers..person_short.pers_id
	and type = "ARCHIVE"
	and joint not like "%-%"
	and linked_propnum is not null
	and (linked_propnum in (select proposal_number from proposal p2 where
        convert(int,substring(proposal_number,3,2)) in ($cats) and 
        type !="ARCHIVE"))
	order by last,proposal_number);
	
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE "^%d^%s^%s^%s^%s^%s^%s^\n",@row;
  }

  close OFILE;
}


# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input
{

  my($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             i=> "$ENV{ASCDS_DATA}/panel.default",
             o=> "$ENV{ASCDS_PROP_DIR}/reports/assign_proposals",
             a=> "$ENV{ASCDS_PROP_AO}"
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "i=s",
          "a=s",
          "q=s",
          "r=s",
          "o=s",
          "l",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    use Term::ReadKey;
     {
       ReadMode 'noecho';
       print "Enter password for $param{U} on $param{S}: ";
       $pwd = ReadLine( 0 );
       chomp $pwd;
       ReadMode 'restore';
       print "\n";
     }
  }
  else {
    open PFILE,"< $param{q}";
    while ( <PFILE> ){
      chomp;
      $pwd = $_;
    }
  }
  $param{q} = $pwd;
  

  if (!-e $param{o}) {
    `mkdir $param{o};chmod 02770 $param{o}`;
  }

}

sub usage
{
    print STDERR "\nUSAGE: prop_panel_assign.pl -U [ -Siol]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -i panel description file, default is ASCDS_DATA/panel.default\n";
    print STDERR "       -l update linked proposal numbers \n";
    print STDERR "       -o output directory, default is ASCDS_PROP_DIR/reports/assign_proposals/\n";
    print STDERR "       -S database server, default is ASCDS_PROP_SQLSRV\n";
}


