#!@PERLDB@ 
#
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_final_reviews.pl.in
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#  Prints the final reviews ( Peer or Final if it's in > 1 panel)
#  for all proposals in a given cycle.
#
#
#* NOTES:
#
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/
BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}


use vars qw ( %param  @Proposals  $dbh @reqfiles $reqfile
	);

use strict;
use Carp;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}

{
  my($pno,$fname,@filenames,$printdir,$hh);
  my($conflictFile);
  my($stmp,$dsn);

  parse_input();

  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  get_proposals();
    
  foreach $pno (@Proposals) {
    get_reviews($pno);
  }
}

sub printReport 
{
  my($proposal_number,$panel,$subcat,$title,$type,$pi,$comments,$rpt) = @_;
  my($stmp);

  $stmp = $param{o} . "/" . $proposal_number  . "_" . $rpt . ".txt";
  open (RFILE,"> $stmp") or 
	die("Unable to open $stmp for writing.\n");
  print RFILE "Review: Chandra $rpt Review Form\n";
  print RFILE "Panel: $panel\n";
  print RFILE "Proposal Number: $proposal_number\n";
  print RFILE "Subject Category: $subcat\n";
  print RFILE "P.I. Name: $pi\n";
  print RFILE "Proposal Title: $title\n";
  print RFILE "Type: $type\n";
  print RFILE "__________________________________________________\n";
  print RFILE "Review Report:\n";
  print RFILE "$comments\n";
  close RFILE;
}

sub get_reviews
{
  my($pno) = @_;
  my($proposal_number);
  my($sql,@row,$sth);
  my ($didit)  = 0;

  $proposal_number = sprintf ("%08.8d", $pno);
  print STDERR "processing $proposal_number\n";

  
  $sql = qq( select proposal_number,panel_name,
	category_descrip,title,type,(last + "," +convert(char(1),first)),
	comments
	from proposal,panel,panel_proposal,final_review,
	axafusers..person_short ps
	where proposal.proposal_id = panel_proposal.proposal_id
	and proposal_number = "$proposal_number" 
	and panel_proposal.panel_id = panel.panel_id
	and proposal.piid = ps.pers_id
	and proposal.proposal_id = final_review.proposal_id);

  $sth = $dbh->prepare($sql);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
    $didit = 1;
     printReport(@row,"Final");
  }
  $sth->finish;
  if (!$didit) {
  $sql = qq( select proposal_number,panel_name,
	category_descrip,title,type,(last + "," +convert(char(1),first)),
	comments
	from proposal,panel,panel_proposal,proposal_review,peer_review,
	axafusers..person_short ps
	where proposal.proposal_id = panel_proposal.proposal_id
	and panel_proposal.panel_id = panel.panel_id
	and proposal_number = "$proposal_number" 
	and proposal.proposal_id = proposal_review.proposal_id
	and proposal.piid = ps.pers_id
	and proposal_review.peer_review = peer_review.review_id
  );
  $sth = $dbh->prepare($sql);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
    $didit = 1;
     printReport(@row,"Peer");
  }
  $sth->finish;
  } 
}  
  
 

sub get_proposals
{
  my($str,$fname,$ii,$ss);
  my($sql,@row,$sth);
  
  $sql = qq(select distinct proposal_number from proposal,panel_proposal
	where proposal.proposal_id = panel_proposal.proposal_id and
	proposal.ao_str = "$param{a}"
        );
  if ($param{p}) {
     $sql .= qq( and proposal_number like "%$param{p}%");
  }
  $sql .= qq( order by proposal_number); 
  #print STDERR "$sql\n";
  $sth = $dbh->prepare($sql);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
    push @Proposals,$row[0];
  }

}




sub parse_input {

  my($pwd);
  my $err = 0;

  %param = ( U => undef,
             S => $ENV{DB_PROP_SQLSRV},
             o => ".",
             a => $ENV{ASCDS_PROP_AO},
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "p=s",
          "q=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if ($param{d}) {
    $param{d} .= "/CHANDRA";
  }

  if ($err) {
    &usage;
    exit(1);
  }
  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;


}



sub usage {
  print STDERR "prop_final_reviews.pl U[Sad]\n";
  print STDERR "        -U  database user name \n";
  print STDERR "        -S  sql server, default is DB_PROP_SQLSRV\n";
  print STDERR "        -a  AO, default is ASCDS_PROP_AO\n";
  print STDERR "        -p  proposal_number, default is all proposals\n";
  print STDERR "        -o  output directory path, default is current\n";
  print STDERR "\nNote:  Only retrieves proposals from the peer review\n";
}
