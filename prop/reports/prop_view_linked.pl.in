#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_view_linked.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script displays linked proposals
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/


BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw( %param $dbh %panels  @reqfiles $reqfile
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


# ---------------- MAIN ----------------------------------------------
{
  my($dsn,$stmp);

  &parse_input;

  
  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});


  #open output file
  open(OFILE,"> $param{o}") || 
	die "ERROR: Unable to open $param{o} for writing.\n";

  #first get any panel(s) associated with linked proposals
  &do_panels();

  #retrieve linked proposals 
  printf OFILE ("\n%-8.8s  %-8.8s  %-25.25s %-11.11s %-10.10s  %-6.6s  %s \n",
	" ","Linked"," "," "," "," ","Linked");
  printf OFILE ("%-8.8s  %-8.8s  %-25.25s %-11.11s %-10.10s  %-6.6s  %s \n",
    "Proposal", "Proposal", "P.I.", "Type", "Status", "Panel","Panel");
  printf OFILE ("---------------------------------------------------------------------------------------\n");
  $stmp = qq(select distinct proposal_number,linked_propnum,
	last,type ,status
	from proposal,axafusers..person_short ps where
        proposal.piid = ps.pers_id and
	proposal.ao_str = "$param{a}" and
	proposal.status not in ("INCOMPLETE","WITHDRAWN") and
        proposal.linked_proposal = "Y"
	order by proposal_number);
  &do_query($stmp,"Linked");

  close OFILE;
}

sub do_panels
{
  my($sql,$sth,@row,$ii,$str);
  $sql = qq(select distinct proposal_number,panel_name
	from proposal,panel_proposal,panel where
        proposal.proposal_id = panel_proposal.proposal_id and
        panel_proposal.panel_id = panel.panel_id and
	proposal.ao_str = "$param{a}" and
        proposal.linked_proposal = "Y" 
        order by proposal_number);
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
      $str = $panels{$row[0]};
      if ($str) { $str .= ','; }
      $str .= $row[1];
      $panels{$row[0]} = $str;
  }
}
# ----------------------------------------------------------
# perform query
# ----------------------------------------------------------
sub do_query
{
  my($sql,$type) = @_;
  my($sth,@row,$ii,$str);

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-8.8s  %-8.8s  %-25.25s %-11.11s %-10.10s  %-6.6s  %s \n",
	@row,$panels{$row[0]}, $panels{$row[1]});
  }
}


# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input 
{
  my ($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
             a=> "$ENV{ASCDS_PROP_AO}"
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "q=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage 
{
    print STDERR "\nUSAGE: prop_view_linked.pl -Uo [-Sa]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
}

