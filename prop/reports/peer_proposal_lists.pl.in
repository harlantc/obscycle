#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: peer_proposal_lists.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#  Lists of prop#,panel,PI,title
#
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw (%param $dbh @panels @reqfiles $reqfile
	);

use strict;
use Carp;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


{
  my ($password,$dsn,$stmp,$fname,$ii,$curdate,$pname);
  my ($ext);


# -------------------------- MAIN ----------------------------------
  parse_input();


  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  $curdate = get_date();

  $ext = ".txt";
  $ext = ".csv" if ($param{f} =~ /,/);

  #multicycle lists
  $fname = $param{o} . "/multicycle_by_panel" .  $ext;
  open (OFILE,">$fname")  || 
    die "Unable to open $fname for writing.\n";
  #printf OFILE ("%-60.60s   $curdate\n\n",
      #"Multicycle Proposals for Chandra Cycle $param{a}");
  do_multicycle_list();
  close OFILE;
  chgroup($fname);
  chmod 0660,$fname;

  #the archive lists
  $fname = $param{o} . "/archive_by_panel" .  $ext;
  open (OFILE,">$fname")  || 
    die "Unable to open $fname for writing.\n";
  #print STDERR "processing $fname\n";
    
  printf OFILE (qq(%3.3s$param{f}%-8.8s$param{f}%-7.7s$param{f}"%-20.20s"$param{f}%9.9s$param{f}"%s"\n),
	"Pnl","Proposal","Type","P.I.","Req.Amt","Title");

  do_money_list("ARCH%");
  close OFILE;
  chgroup($fname);
  chmod 0660,$fname;

  #theory lists
  $fname = $param{o} . "/theory_by_panel" .  $ext;
  open (OFILE,">$fname")  || 
    die "Unable to open $fname for writing.\n";
  #print STDERR "processing $fname\n";

  printf OFILE (qq(%3.3s$param{f}%-8.8s$param{f}%-7.7s$param{f}"%-20.20s"$param{f}%9.9s$param{f}"%s"\n),
	"Pnl","Proposal","Type","P.I.","Req.Amt","Title");

  do_money_list("THEO%");
  close OFILE;
  chgroup($fname);
  chmod 0660,$fname;


  # the individual proposal lists by panel used by Evan when creating tarball
  @panels = get_panels();
  for $pname (@panels) {
    $fname = $param{o};
    $fname .= "/proposal_list.panel$pname";
    open (OFILE,">$fname")  ||
      die "Unable to open $fname for writing.\n";
    #print STDERR "processing $fname\n";
    printf OFILE "%-55.55s    $curdate\n\n","Panel $pname Proposal List for Chandra Cycle $param{a}";
    printf OFILE ("%-3.3s  %-8.8s  %-20.20s  %s\n",
        "Pnl","Proposal","P.I.","Title");
    printf OFILE ("-------------------------------------------------------------------------------------\n");
    do_list("proposal_number",$pname);
    close OFILE;
    chgroup($fname);
    chmod 0660,$fname;

  }

   

  $fname = $param{o} . "/bpp_panel" . $ext;
  open (OFILE,">$fname")  || 
     die "Unable to open $fname for writing.\n";
  &do_bpp_panels;

  close OFILE;
  chgroup($fname);
  chmod 0660,$fname;
 
  $dbh->disconnect;
}

# -------------------------------------------------------------------
# query to retrieve the panels for the ao
# -------------------------------------------------------------------
sub get_panels
{
  my($stmp,$sth,@row,@panels);

    $stmp = qq(select panel_name from panel,ao where
        ao.ao_str = "$param{a}" and
        ao.ao_id = panel.ao
	and panel_name != "BPP"
        order by panel_name
        );
    #print STDERR "aa: $stmp\n";
    $sth = $dbh->prepare($stmp);
    $sth->execute;

    @panels = ();
    while((@row) = $sth->fetchrow_array()) {
      push @panels,$row[0];
    }

    return @panels;
}


# --------------------------------------------------

sub do_bpp_panels
{
  my($sql);
  my($sth,@row,$oldpno,%panels,$str);


  # distinct list of BPP proposals
  $sql= qq(select proposal_number,last,type,title
        from proposal, axafusers..person_short ps
        where proposal.ao_str = "$param{a}"  and
        (proposal.status = "PROPOSED"  or rank is not null) and
        (proposal.type like "%LP%" or proposal.type like "%XVP%") and
        proposal.piid = ps.pers_id );

  # panels for BPP proposals
  $str = qq(select proposal_number,panel_name
        from proposal,panel_proposal pp1, panel p1
        where (type like "%LP%" or type like "%XVP%") and ao_str="$param{a}"
        and (proposal.status = "PROPOSED"  or rank is not null) 
        and proposal.proposal_id = pp1.proposal_id 
        and pp1.panel_id = p1.panel_id  order by proposal_number);
  $sth = $dbh->prepare($str);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $str = $panels{$row[0]};
    if ($str) { $str .= ','; }
    $str .= $row[1];
    $panels{$row[0]} = $str;
  }
  printf OFILE (qq("%-10.10s"$param{f}%-9.9s$param{f}"%-25.25s"$param{f}"%-7.7s"$param{f}"%-s"\n),
    "Panel","Proposal", "P.I.","Type","Title");

  # now display distinct proposals with associated panels
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    if ($oldpno != $row[0]) {
      printf OFILE (qq("%-10.10s"$param{f}%-9.9s$param{f}"%-25.25s"$param{f}"%-7.7s"$param{f}"%s"\n),
           $panels{$row[0]},@row);
    }
    $oldpno = $row[0];
  }

}



sub do_multicycle_list
{
 my($sql,$sth,@row,$stmp,$fname);
  my($ctime,$n,$n1,$n2,%panels,$str);
  my($t0,$t1,$t2,$dd);

  $t0 = 0;
  $t1 = 0;
  $t2 = 0;
  $n  = $param{a};
  $n1 = $n + 1;
  $n2 = $n + 2;
  printf OFILE (qq(\"%-10.10s\"$param{f}%-8.8s$param{f}"%-15.15s"$param{f}%-10.10s$param{f}%-10.10s$param{f}%-10.10s\n),
        "Panel","Proposal","P.I.","Cycle $n","Cycle $n1","Cycle $n2");

  $sql = qq(select proposal_number,panel_name
        from proposal,panel_proposal , panel 
        where proposal.ao_str = "$param{a}"
        and proposal.multi_cycle = "Y"
	and proposal.proposal_id = panel_proposal.proposal_id
	and panel_proposal.panel_id = panel.panel_id);
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $str = $panels{$row[0]};
    if ($str) { $str .= ','; }
    $str .= $row[1];
    $panels{$row[0]} = $str;
  }



 $sql = qq(select distinct
        proposal_number,last,sum(prop_exposure_time),
        sum(est_time_cycle_n1),sum(est_time_cycle_n2)
        from proposal,target,axafusers..person_short ps
        where proposal.ao_str = "$param{a}"
        and piid = pers_id
        and (proposal.status = "PROPOSED"  or rank is not null) 
        and proposal.proposal_id = target.proposal_id
        and proposal.multi_cycle = "Y"
        group by proposal.proposal_number,last
        order by proposal_number);
  $sth = $dbh->prepare($sql);
  #print STDERR "$sql\n";
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
     $ctime = $row[2] - $row[3] - $row[4];
     $t0 += $ctime;
     $t1 += $row[3];
     $t2 += $row[4];
     printf OFILE (qq("%-10.10s"$param{f}%-8.8s$param{f}"%-15.15s"$param{f}%10.2f$param{f}%10.2f$param{f}%10.2f\n),
       $panels{$row[0]},$row[0],$row[1],$ctime,$row[3],$row[4]);
  }
  $dd = "----------";
  printf OFILE (qq(%-12.12s$param{f}%-8.8s$param{f}%-17.17s$param{f}%-10.10s$param{f}%-10.10s$param{f}%-10.10s\n),
        " "," "," " ,$dd,$dd,$dd);
  printf OFILE (qq(%-12.12s$param{f}%-8.8s$param{f}%-17.17s$param{f}%10.2f$param{f}%10.2f$param{f}%10.2f\n),
        " "," "," " ,$t0,$t1,$t2);

}

sub do_money_list
{    
  my($type) = @_;
  my($str,$fname,$ii,$ss);
  my($sql,@row,$sth);

  
  $sql = qq(select distinct panel_name,proposal_number,type,last,
	total_time,proposal.title
  	from axafusers..person_short ps, proposal,
	panel,panel_proposal
	where proposal.piid = ps.pers_id and
	proposal.ao_str = "$param{a}" and
	proposal.proposal_id = panel_proposal.proposal_id and
	panel_proposal.panel_id = panel.panel_id
	and proposal.type like "$type"
        order by panel_name,proposal_number
	);

   $sth = $dbh->prepare($sql);
   $sth->execute;
   while (@row = $sth->fetchrow_array) {
     printf OFILE qq(%-3.3s$param{f}%-8.8s$param{f}%-7.7s$param{f}"%-20.20s"$param{f}%9.2f$param{f}"%s"\n),@row;
   } 
} 

sub do_list
{   
  my($orderby,$pname) = @_;
  my($str,$fname,$ii,$ss);
  my($sql,@row,$sth);

 
  $sql = qq(select distinct panel_name,proposal_number,last,proposal.title
        from axafusers..person_short ps, proposal,
        panel,panel_proposal
        where proposal.piid = ps.pers_id and
        proposal.ao_str = "$param{a}" and
        panel_name = "$pname" and
        proposal.proposal_id = panel_proposal.proposal_id and
        panel_proposal.panel_id = panel.panel_id
        order by $orderby
        );
  $sth = $dbh->prepare($sql);
  #print STDERR "$sql\n\n";
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
    printf OFILE "%-3.3s  %-8.8s  %-20.20s  %s \n",@row;
  }
}


  
    
sub parse_input { 
  my ($pwd);
  my $err = 0;

  %param = ( U => undef,
             S => $ENV{DB_PROP_SQLSRV},
             o => ".",
             f => ",",
             a => $ENV{ASCDS_PROP_AO}
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "a=s",
          "o=s",
          "f=s",
          "q=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val;
      warn("parameter '$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if ($err) {
    &usage;
    exit(1);
  }
  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage {
  print STDERR "\nUSAGE: peer_proposal_lists.pl -U [Sao] \n";
  print STDERR "        -U  database user name \n";
  print STDERR "        -S  sql server, default is DB_PROP_SQLSRV\n";
  print STDERR "        -a  AO , default is ASCDS_PROP_AO\n";
  print STDERR "        -f  delimiter, default is comma\n";
  print STDERR "        -o  output directory, default is current directory\n";
  print STDERR "\nOutput lists: \n";
  print STDERR <<ENDL;
  bpp_panel.*
  archive_by_panel.*
  theory_by_panel.*
  multicycle_by_panel.*
ENDL

}


