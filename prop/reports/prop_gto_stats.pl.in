#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_gto_stats.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script provides statistics for gto proposals.
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw ($dbh %param @reqfiles $reqfile
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


# -------------------------- MAIN ----------------------------------
{
  my($dsn,$stmp,$idx);

  &parse_input;

  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  open(OFILE,"> $param{o}") ||
    die "Unable to open $param{o} for writing!\n";
  printf OFILE "\n$param{p} Statistics for Cycle $param{a}      %s\n\n",get_date();

  &build_gto_probability;
  $idx = 1;
  &do_gto_totals($idx);
  $idx++;
  &do_gto_summary($idx);
  $idx++;
  &do_gto_summary_by_type($idx);
  $idx++;
  $idx = &do_gto_counts($idx);
  &do_gto($idx);
  $idx++;
  if ($param{t}) {
    &do_gto_targets($idx);
    $idx++;
  }
  close OFILE;
  chgroup($param{o});
  chmod 0660,$param{o};


}


sub build_gto_probability
{
  my($sql,$sth,@row);

  $sql =  qq(create table #dtest1 (pid int, 
	tid int,
	reqtime float NULL,
	apptime float NULL,
	probability float NULL));
  $dbh->do($sql);
  $sql = qq(insert #dtest1 select target.proposal_id,
	target.targid,
	prop_exposure_time,
	approved_exposure_time,probability 
	from proposal,target,too
	where proposal.proposal_id = target.proposal_id and
	target.targid *= too.targid and
	proposal.ao_str like "$param{a}" and
	proposal.type like "$param{p}%" );
  #print STDERR ("$sql\n");
  $dbh->do($sql);
  $sql = qq(update #dtest1 set probability=1.0 where
     probability is null or probability=0.0);
  $dbh->do($sql);

  $sql =  qq(create table #dtest (pid int, reqtime float NULL,
	apptime float NULL,
	reqtimep float NULL,
	apptimep float NULL));
  $dbh->do($sql);
  $sql = qq(insert #dtest select #dtest1.pid,
        sum(#dtest1.reqtime),
        sum(#dtest1.apptime),
        sum(#dtest1.reqtime * #dtest1.probability),
        sum(#dtest1.apptime * #dtest1.probability)
	from #dtest1
	group by #dtest1.pid);
  #print STDERR ("$sql\n");
  $dbh->do($sql);
}
	
sub do_gto
{
  my($idx) = @_;
  my($sql,$sth,@row);
	
  $sql = qq(select proposal_number,axafusers..person_short.last,type,
	proposal.status,
	reqtime,apptime,reqtimep,apptimep,title,
	rank
	from axafusers..person_short,proposal,#dtest where
	proposal.ao_str like "$param{a}" and
	proposal.type like "$param{p}%" and
	proposal.piid = axafusers..person_short.pers_id and
        proposal.proposal_id = #dtest.pid 
	order by upper(axafusers..person_short.last),
	proposal.status,proposal_number);
  $sth = $dbh->prepare($sql);
#print STDERR "$sql\n";
  $sth->execute;
  print OFILE "\n\n$idx. ALL $param{p} proposals  \n\n";
  printf OFILE "%-8.8s  %-15.15s  %-17.17s  %-10.10s  %8.8s  %8.8s  %8.8s  %8.8s  %s\n",
	"","","","","","","w/Prob.","w/Prob.","";
  printf OFILE "%-8.8s  %-15.15s  %-17.17s  %-10.10s  %-8.8s  %-8.8s  %8.8s  %8.8s  %s\n",
	"Proposal","P.I.","Type","Status","Req.Time","App.Time","Req.Time","AppTime","Title";
  print OFILE "----------------------------------------------------------------------------------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {
     printf OFILE "%-8.8s  %-15.15s  %-17.17s  %-10.10s  %8.2f  %8.2f  %8.2f  %8.2f %s\n",@row;
  }

}
sub do_gto_totals
{
  my($idx) = @_;
  my($stmp,$sth,@row);
  my($reqcntp,$reqcntt,$reqT,$reqT_prob);
  my($appcntp,$appcntt,$appT,$appT_prob);

  
  # all gto requested time
  $stmp = qq(select count(distinct proposal.proposal_id),
	count(distinct target.targid),
	sum(prop_exposure_time)
        from proposal,target where
	proposal.proposal_id = target.proposal_id and
	proposal.ao_str like "$param{a}" and
	type like "%$param{p}%" and 
        proposal.status not in ("INCOMPLETE","WITHDRAWN") and
        proposal.proposal_id = target.proposal_id );
  $sth = $dbh->prepare($stmp);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
     $reqcntp = $row[0];
     $reqcntt = $row[1];
     $reqT = $row[2];
  }
  # all gto requested time w/probability
  $stmp = qq(select sum(apptimep),sum(reqtimep) from #dtest,proposal
	where pid=proposal_id and 
        proposal.status not in ("INCOMPLETE","WITHDRAWN") );
  $sth = $dbh->prepare($stmp);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
     $appT_prob = $row[0];
     $reqT_prob = $row[1];
  }

  $stmp = qq(select count(distinct proposal.proposal_id),
	count(distinct target.targid),
	sum(approved_exposure_time)
        from proposal,target where
	proposal.proposal_id = target.proposal_id and
	proposal.ao_str like "$param{a}" and
	type like "%$param{p}%" and
	target.status = "accepted" and
        proposal.status not in ("INCOMPLETE","WITHDRAWN") and
        proposal.proposal_id = target.proposal_id );
  $sth = $dbh->prepare($stmp);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
     $appcntp = $row[0];
     $appcntt = $row[1];
     $appT = $row[2];
  }


  print OFILE "$idx. Totals for Proposals .\n\n";
 
  print OFILE   "                   Time(ksec)\n";
  print OFILE   "                 $param{p}  $param{p} w/prob        #Props  #Tgts\n";
  print OFILE   "--------------------------------------------------------\n";
  printf OFILE ("Requested: %9.2f  %9.2f            %03.1d   %04.1d\n",
        $reqT,$reqT_prob,$reqcntp,$reqcntt);
  if ($appcntp > 0) {
    printf OFILE ("Approved : %9.2f  %9.2f            %03.1d   %04.1d\n",
        $appT,$appT_prob,$appcntp,$appcntt);
  }

}

sub do_gto_summary
{
  my($idx) = @_;
  my($sql,$sth,@row);
	#(proposal.status="APPROVED" or rank >= 3.5) and

  $sql = qq(select upper(axafusers..person_short.last),
        sum(reqtime),sum(apptime),sum(reqtimep),sum(apptimep) 
	from axafusers..person_short,proposal,#dtest where
	proposal.piid = axafusers..person_short.pers_id and
	proposal.proposal_id = #dtest.pid and
        proposal.status not in ("INCOMPLETE","WITHDRAWN") and
	proposal.ao_str like "$param{a}" and
	type like "%$param{p}%"
        group by upper(axafusers..person_short.last)
        order by upper(axafusers..person_short.last));
  $sth = $dbh->prepare($sql);
  $sth->execute;
  print OFILE ("\n\n$idx. Summary $param{p} Times \n\n");
  printf OFILE "%-20.20s  %8.8s  %8.8s  %8.8s  %8.8s\n",
	"","","","w/Prob.","w/Prob.";
  printf OFILE "%-20.20s  %8.8s  %8.8s  %8.8s  %8.8s\n",
	"P.I.","Req.Time","App.Time","Req.Time","App.Time";
  print OFILE "-------------------------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {

     printf OFILE "%-20.20s  %8.2f  %8.2f  %8.2f  %8.2f\n",@row;
  }

}

sub do_gto_summary_by_type
{
  my($idx) = @_;
  my($sql,$sth,@row);
	#(proposal.status="APPROVED" or rank >= 3.5) and

  $sql = qq(select upper(axafusers..person_short.last),type,
        sum(reqtime),sum(apptime),sum(reqtimep),sum(apptimep) 
	from axafusers..person_short,proposal,#dtest where
	proposal.piid = axafusers..person_short.pers_id and
        proposal.status not in ("INCOMPLETE","WITHDRAWN") and
	proposal.proposal_id = #dtest.pid and
	proposal.ao_str like "$param{a}" and
	type like "%$param{p}%"
        group by upper(axafusers..person_short.last),type
	order by upper(axafusers..person_short.last),type);
  $sth = $dbh->prepare($sql);
  $sth->execute;
  print OFILE ("\n\n$idx. Summary $param{p} Times By Type \n\n");
  printf OFILE "%-20.20s %-15.15s  %8.8s  %8.8s  %8.8s  %8.8s\n",
	"","","","","w/Prob.","w/Prob.";
  printf OFILE "%-20.20s %-15.15s  %8.8s  %8.8s  %8.8s  %8.8s\n",
	"P.I.","Type","Req.Time","App.Time","Req.Time","App.Time";
  print OFILE "----------------------------------------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {

     printf OFILE "%-20.20s %-15.15s  %8.2f  %8.2f  %8.2f  %8.2f\n",@row;
  }

}


# stats for number of observations and time critical counts
sub do_gto_counts
{
  my($idx) = @_;
  my($sql,$sth,@row);


  $sql = qq(select distinct proposal_number,last,type
	from axafusers..person_short,proposal,target where
	target.proposal_id=proposal.proposal_id and
	proposal.piid = axafusers..person_short.pers_id and
	proposal.ao_str like "$param{a}" and
        proposal.status not in ("INCOMPLETE","WITHDRAWN") and
	type like "$param{p}%"
	and (time_critical = "Y" )
	order by axafusers..person_short.last, proposal_number);
  print OFILE "\n\n$idx. At least one target with Time Critical=Y\n";
  printf OFILE ("%-8.8s  %-20.20s  %-17.17s\n",
	"Proposal","P.I.","Type");
  print OFILE "-------------------------------------------------------------\n";
  $sth = $dbh->prepare($sql);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-8.8s  %-20.20s  %-17.17s\n",@row);
  }
  $idx++;
 
  $sql = qq(select distinct proposal_number,last,type
	from axafusers..person_short,proposal,target where
	target.proposal_id=proposal.proposal_id and
	proposal.piid = axafusers..person_short.pers_id and
	proposal.ao_str like "$param{a}" and
	type like "$param{p}%" and time_critical = "P" 
        and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
	and targid not in (select targid from proposal p,target t where
	t.proposal_id = p.proposal_id and type like "%$param{p}%" and
	proposal.ao_str like "$param{a}" and time_critical="Y")
	order by axafusers..person_short.last, proposal_number);

  print OFILE "\n\n$idx. At least one target with Time Critical=P and NO required constraints\n";
  printf OFILE ("%-8.8s  %-20.20s  %-17.17s\n",
	"Proposal","P.I.","Type");
  print OFILE "-------------------------------------------------------------\n";
  $sth = $dbh->prepare($sql);
  $sth->execute;
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-8.8s  %-20.20s  %-17.17s\n",@row);
  }
  $idx++;
 
  $sql =  qq(create table #dtestc (type varchar(30), num_observations int NULL,
	app_grid int NULL));
  $dbh->do($sql);
  $sql = qq(insert #dtestc select distinct type,
	sum(num_observations),sum(approved_num_pointings)
	from proposal,target,grid where
	proposal.proposal_id=target.proposal_id 
	and proposal.ao_str like "$param{a}" 
	and proposal.type like "$param{p}%"
	and target.status = "accepted"
	and target.targid *= grid.targid
	group by type);
  $dbh->do($sql);

  $sql = qq(select distinct proposal.type,
	sum(grid.num_pointings) , t2.app_grid 
	from proposal,target ,grid, #dtestc t2 where
	proposal.proposal_id=target.proposal_id 
        and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
	and proposal.type like "$param{p}%"
	and proposal.type *= t2.type 
	and proposal.ao_str like "$param{a}" 
	and target.targid *= grid.targid
	group by proposal.type,t2.app_grid
	order by proposal.type);

  $sth = $dbh->prepare($sql);
  $sth->execute;
  printf OFILE ("\n\n$idx. Total Number of $param{p} Grids\n");
  printf OFILE ("%-17.17s  %6.6s  %6.6s\n","Type","#Req","#App");
  print OFILE "--------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-17.17s  %6d  %6d\n",@row);
  }
  $idx++;


  $sql = qq(select distinct proposal.type,
	sum(target.num_observations) , t2.num_observations 
	from proposal,target ,#dtestc t2 where
	proposal.proposal_id=target.proposal_id 
        and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
	and proposal.type like "$param{p}%"
	and proposal.type *= t2.type 
	and proposal.ao_str like "$param{a}" 
	group by proposal.type,t2.num_observations
	order by proposal.type);

  $sth = $dbh->prepare($sql);
  $sth->execute;
  printf OFILE ("\n\n$idx. Total Number of $param{p} Observations\n");
  printf OFILE ("%-17.17s  %6.6s  %6.6s\n","Type","#Req","#App");
  print OFILE "--------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-17.17s  %6d  %6d\n",@row);
  }
  $sql = "drop table #dtestc";
  $dbh->do($sql);
  $idx++;

  $sql =  qq(create table #dtestc (type varchar(30), time_critical char,
	num_observations int));
  $dbh->do($sql);
  $sql = qq(insert #dtestc select distinct type,
	time_critical,sum(num_observations)
	from proposal,target where
	proposal.proposal_id=target.proposal_id 
	and proposal.ao_str like "$param{a}" 
	and proposal.type like "$param{p}%"
	and target.status = "accepted"
	group by type,time_critical);
  $dbh->do($sql);

  $sql = qq(select proposal.type,target.time_critical,
	sum(target.num_observations),
	t2.num_observations
	from proposal,target,#dtestc t2 
	where proposal.proposal_id=target.proposal_id 
	and proposal.type*=t2.type 
	and proposal.ao_str like "$param{a}" 
	and proposal.type like "$param{p}%" 
        and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
	and target.time_critical != "N" 
	and target.time_critical *= t2.time_critical
	group by proposal.type,target.time_critical,t2.num_observations
	order by target.time_critical);
  $sth = $dbh->prepare($sql);
  $sth->execute;
  printf OFILE ("\n\n$idx. Number of Time Critical Observations\n");
  printf OFILE ("%-17.17s  %3.3s  %6.6s  %6.6s\n","Type","TC","#Req","#App");
  print OFILE "--------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-17.17s  %3.3s  %6d  %6d\n",@row);
  }
  $sql = "drop table #dtestc";
  $dbh->do($sql);
  $idx++;

  return($idx);
  
}
  

sub do_gto_targets
{
  my($idx) = @_;
  my($sql,$sth,@row,$prob);
	
  $sql = qq(select distinct proposal_number,axafusers..person_short.last,
	proposal.type, target.status,targ_num,targname,too.probability,
	reqtime,apptime,(reqtime * #dtest1.probability),
	(apptime * #dtest1.probability)
	from axafusers..person_short,proposal,#dtest1,target,too where
	proposal.ao_str like "$param{a}" and
	proposal.type like "$param{p}%" and
	proposal.piid = axafusers..person_short.pers_id and
        proposal.proposal_id = #dtest1.pid  and
        proposal.status not in ("INCOMPLETE","WITHDRAWN")  and
        target.targid = #dtest1.tid  and
        proposal.proposal_id = target.proposal_id and
        target.targid *= too.targid 
	order by upper(axafusers..person_short.last),
	proposal_number,targ_num);
  $sth = $dbh->prepare($sql);
#print STDERR "$sql\n";
  $sth->execute;
  print OFILE "\n\n$idx. ALL $param{p} targets  \n\n";
  printf OFILE "%-8.8s  %-15.15s  %-17.17s  %-8.8s  %-3.3s  %-22.22s  %-5.5s  %8.8s  %8.8s  %8.8s  %8.8s\n",
	"","","","","","","","","","w/Prob.","w/Prob.";
  printf OFILE "%-8.8s  %-15.15s  %-17.17s  %-8.8s  %-3.3s  %-22.22s  %-5.5s  %8.8s  %8.8s  %8.8s  %8.8s\n",
	"Proposal","P.I.","Type","Status","Tgt","Target Name","Prob.","Req.Time","App.Time","Req.Time","AppTime";
  print OFILE "----------------------------------------------------------------------------------------------------------------------------------\n";
  while (@row = $sth->fetchrow_array) {
     #probability
     if (!$row[6] || $row[6] =~ /0.0/) {
       $row[6] = " ";
     }
     else {
       $row[6] = sprintf("%4.2f",$row[6]);
     }
     printf OFILE "%-8.8s  %-15.15s  %-17.17s  %-8.8s  %3.3d  %-22.22s  %5s  %8.2f  %8.2f  %8.2f  %8.2f\n",@row;
  }
}




# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input
{
  my ($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
             a=> "$ENV{ASCDS_PROP_AO}",
             p=> "GTO",
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "q=s",
          "p=s",
	  "t",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter '$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }


  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage
{
    print STDERR "\nUSAGE: prop_gto_stats.pl -Uo [-Sat]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
    print STDERR "       -t also produce target lists \n";
    print STDERR "       -p proposal type, default GTO\n";
}

