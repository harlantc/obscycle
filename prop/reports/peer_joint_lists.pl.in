#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995-2016, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: peer_joint_lists.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#  Lists of prop#,panel,PI,type,joint,chandra time,joint time
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@"; } 


use vars qw (%param $dbh @panels @reqfiles $reqfile 
       @facility @reqtime @apptime

	);

use strict;
use Carp;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_build_joint.pl",
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}

{
  my ($password,$dsn,$stmp,$fname);



# -------------------------- MAIN ----------------------------------
  parse_input();


  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  # go get panel info so can display if on multiple panels
  getPanelInfo();
  
  #set filename based on delimiter
  if ($param{f} =~ /,/) {
    $fname = $param{o} . "/cycle" . $param{a} . "_joint_all.csv";
  } else  {
    $fname = $param{o} . "/cycle" . $param{a} . "_joint_all.txt";
  }
  open (OFILE,">$fname")  || 
	die "Unable to open $fname for writing.\n";
  print STDERR "Output file: $fname\n";

  #now go get all the joint info
  do_all_joint();

  close OFILE;
  chgroup($fname);
  chmod 0660,$fname;

  $dbh->disconnect;
}



sub do_all_joint
{
  my($idx) = @_;
  my($sql,$sth,@row,$ii,$str);
  my($mystat,$thefmt,$thedfmt,$hstr);
  my($totc,@totr,$jj,$rr,$dd);
  my($jflds,$jaflds,@hdrs);
  
  for ($ii=0;$ii<=$#reqtime;$ii++) {
    if ($ii > 0) {
      $jflds .= ",";
      $jaflds .= ",";
    }
    $jflds .= $reqtime[$ii];
    $jaflds .= $reqtime[$ii] . "," . $apptime[$ii];
  }

  @hdrs = @facility;
  if ($param{t}) {
    $jflds = $jaflds;
    my(@hdrsa);
    foreach $str (@facility) {
      push @hdrsa,"r$str";
      push @hdrsa,"a$str";
    }
    @hdrs =@hdrsa;
  }
  #printf OFILE "\"" . get_date() . "\"\n";
  if (!defined $param{p}) {
    $sql = qq(select distinct pname,);
    $totc=5;
    $thefmt=qq("%-7.7s"$param{f}%-8.8s$param{f}%-22.22s$param{f}%7.7s$param{f}%-23.23s);
    $thedfmt=qq("%-7.7s"$param{f}%-8.8s$param{f}"%-20.20s"$param{f}%7.7s$param{f}%-23.23s);
    printf OFILE ($thefmt, "Panel","Proposal","P.I.","Type","Joint");
    $hstr = sprintf($thefmt,"-----",
	 "--------","--------------------","-------", "------------");
  } else {
    $sql = qq(select distinct );
    $totc=4;
    $thefmt=qq(%-8.8s$param{f}%-22.22s$param{f}%7.7s$param{f}%-23.23s);
    $thedfmt=qq(%-8.8s$param{f}"%-20.20s"$param{f}%7.7s$param{f}%-23.23s);
    printf OFILE ($thefmt, "Proposal","P.I.","Type","Joint");
    $hstr = sprintf($thefmt,
	 "--------","--------------------","-------", "------------");
  }
  my($jfmt) = "";
  foreach $str (@hdrs) {
    printf OFILE ("$param{f}%8.8s",$str);
    $jfmt .= $param{f} . "%8.2f" ;
    $hstr .= "$param{f}--------";
  }
  printf OFILE ("\n$hstr\n");

  $sql .= qq(proposal_number,last,type,
        joint,$jflds
        from proposal,joint,axafusers..person_short ps,#dpan
        where proposal.proposal_id = joint.proposal_id
        and proposal.piid = ps.pers_id
        and proposal.proposal_id = #dpan.pid
        and proposal.ao_str like "$param{a}" and
        joint != "None" and joint not like "%-%" and
        (proposal.status = "PROPOSED"  or rank is not null)
        order by proposal_number);
  #print STDERR "$sql\n";

  $sth = $dbh->prepare($sql);
  $sth->execute();

  while (@row = $sth->fetchrow_array) {
    if (!defined $param{p}) { 
      chop($row[0]); 
    }
    for($jj=0,$rr=$totc; $rr<=$#row;$jj++,$rr++) {
      $totr[$jj] += $row[$rr];
    }
    my $xfmt = $thedfmt . $jfmt . "\n";
    printf OFILE ($xfmt,@row);
  }
  printf OFILE ($thefmt, " "," ", " "," ");
  foreach $str (@hdrs) {
    print OFILE ("$param{f}--------");
  }
  print OFILE "\n";
  printf OFILE ($thefmt, " ", " "," "," ");
  foreach $str (@totr) {
    printf OFILE ("$param{f}%8.2f",$str);
  }
}

# -------------------------------------------------------------
# get the panel information since LPs are on more than 1 panel
# -------------------------------------------------------------
sub getPanelInfo
{
  my($sql,$sthp);
  $sql = qq(create table #dpan (pid int, pname varchar(20)));
  $dbh->do($sql);
  
  $sql=qq(insert #dpan select distinct proposal_id,""
   from proposal
   where  proposal.ao_str = "$param{a}"
	and proposal.joint != "None");
  $dbh->do($sql);
  $sql = qq(update #dpan set pname=(pname+panel_name+",")
	from #dpan,proposal,panel_proposal,panel
	where proposal.proposal_id = #dpan.pid
	and proposal.proposal_id = panel_proposal.proposal_id
	and panel_proposal.panel_id = panel.panel_id
	and panel_name not in ("XVP","LP","VLP","BPP")
	and pname not like ("%" || panel_name || "%")
	and proposal.ao_str = "$param{a}");
  $dbh->do($sql);
  $sql = qq(update #dpan set pname=(pname+panel_name+",")
	from #dpan,proposal,panel_proposal,panel
	where proposal.proposal_id = #dpan.pid
	and proposal.proposal_id = panel_proposal.proposal_id
	and panel_proposal.panel_id = panel.panel_id
	and panel_name not in ("XVP","LP","VLP","BPP")
	and pname not like ("%" || panel_name || "%")
	and proposal.ao_str = "$param{a}");
  $dbh->do($sql);
}

  
sub parse_input { 
  my ($pwd);
  my $err = 0;

  %param = ( U => undef,
             S => $ENV{DB_PROP_SQLSRV},
             o => ".",
             f => ",",
             a => $ENV{ASCDS_PROP_AO},
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
	  "a=s",
	  "q=s",
	  "f=s",
	  "t",
	  "p",
          "h",
          "all",
          "hst",
          "noao",
          "xmm",
          "nrao",
          "spitzer",
          "suzaku",
          "swift",
          "nustar",
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val;
      warn("parameter '$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

#print STDERR "The field separator is ***$param{f}***\n";

  if ($err) {
    &usage;
    exit(1);
  }
  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

 &build_joint_params;


}

sub usage {
  print STDERR "\nUSAGE: peer_joint_lists.pl -U [Sao] \n";
  print STDERR "        -U  database user name \n";
  print STDERR "        -S  sql server, default is DB_PROP_SQLSRV\n";
  print STDERR "        -a  AO, default is ASCDS_PROP_AO\n";
  print STDERR "        -t  also display approved time\n";
  print STDERR "        -f  field separator, default is comma\n";
  print STDERR "        -p  don't do the panel list \n";
  print STDERR "        -o  output directory, default is current directory\n";
}

