#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995-2014, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: peer_panel_member_lists.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script list all panel members for the cycle by panel 
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/


BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}



use vars qw( $dbh $hidx %param @reqfiles $reqfile
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


# ---------------- MAIN ----------------------------------------------
{
  my($dsn,$stmp,$fname,$curdate,$pname,@panels);

  &parse_input;

  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  $curdate = get_date();


  
  $fname = $param{o} . "/panel_member";
  if ($param{f} =~ /,/) {
    $fname .= ".csv";
  } else {
    $fname .= ".txt";
  }
  print STDERR "Output file: $fname\n";
  &build_panel_member_list($fname,"order by last",$curdate);


}
# -----------------------------------------------------------
# all panel members for specified cycle
# -----------------------------------------------------------
sub build_panel_member_list
{
  my($fname,$ordr,$curdate,$pname) = @_;
  my($stmp);


  #open output file
  open(OFILE,"> $fname") or 
	die "ERROR: Unable to open $fname for writing.\n";
  #print STDERR "processing $fname\n";


  #printf OFILE "%-60.60s    %s\n","Panel Members for Cycle $param{a}",$curdate;
  if ($pname !~ /BPP/) {
    $stmp = qq(select distinct panel_name,
	(last + "," + substring(first,1,1)),
	member_type,email from
	axafusers..person_short ps, panel p, panel_member pm,ao
        where ao.ao_str = "$param{a}" and 
	  ao.ao_id = p.ao and
          p.panel_id = pm.panel_id and
	  pm.pers_id = ps.pers_id );
    if ($pname) {
      $stmp .= qq( and panel_name = "$pname" );
    }
  } else {
    $stmp = qq(select distinct panel_name,
	(last + "," + substring(first,1,1)),
	member_type,email from
	axafusers..person_short ps, panel p, panel_member pm,ao
        where ao.ao_str = "$param{a}" and 
	  ao.ao_id = p.ao and
          p.panel_id = pm.panel_id and
	  pm.pers_id = ps.pers_id 
          and (member_type like "Pund%" or member_type="Chair"));
  }
  $stmp .= $ordr;
  &doUserQuery($stmp);
	
  close OFILE;
  chgroup($fname);
  chmod 0660,$fname;

}

# ----------------------------------------------------------
# perform query
# ----------------------------------------------------------
sub doUserQuery
{
  my($sql) = @_;
  my($sth,@row);

  #print STDERR "$sql\n";

  printf OFILE (qq(%-3.3s$param{f}"%-20.20s"$param{f}"%-14.14s"$param{f}"%s"\n),
    "Pnl","Last", "Type","Email");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE (qq(%-3.3s$param{f}"%-20.20s"$param{f}"%-14.14s"$param{f}"%s"\n), @row);
  }
}

# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input 
{
  my($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> ".",
             a=> "$ENV{ASCDS_PROP_AO}",
             f=> ",",
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "f=s",
          "q=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }


  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;


}

sub usage 
{
    print STDERR "\nUSAGE: peer_panel_member_lists.pl -U -o [ -S -a ]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output directory, default is current directory \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
    print STDERR "       -f delimter, default is comma\n";
    print STDERR "\nOutput files produced are:\n";
    print STDERR "  panel_member.*      - members sorted by last name\n";

}

