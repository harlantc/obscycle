#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_detector_for_proposals.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script displays proposal information and all detector/grating
#     combinations requested for the proposal.
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/


BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw( %param $dbh %panels  @reqfiles $reqfile
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


# ---------------- MAIN ----------------------------------------------
{
  my($dsn,$stmp);

  &parse_input;

  
  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});



  #open output file
  open(OFILE,"> $param{o}") || 
	die "ERROR: Unable to open $param{o} for writing.\n";
  print OFILE "Cycle $param{a} Detector/Gratings for Proposals";
  if ($param{p} !~ /all/i)  {
    print OFILE " on Panel $param{p}";
  }
  print OFILE "\n\n";

  #first get all the detectors for the proposals
  &do_detectors();

  #retrieve linked proposals 
  printf OFILE ("\n%-8.8s  %-25.25s %-11.11s  %s \n",
    "Proposal", "P.I.", "Type","Detectors");
  printf OFILE ("----------------------------------------------------------------------------\n");
  $stmp = qq(select distinct proposal_number,
	last,type,detector,grating
	from proposal,axafusers..person_short ps,#det where
        proposal.proposal_id = #det.proposal_id and
        proposal.piid = ps.pers_id 
	and proposal.status not in ("WITHDRAWN","INCOMPLETE")
	order by proposal_number,detector,grating);
  &do_query($stmp);

  close OFILE;
}

sub do_detectors
{
  my($sql,$sth,@row,$ii,$str);
  $sql = qq(create table #det (proposal_id int,
	detector varchar(10), grating varchar(10))); 
  #print STDERR "$sql\n";
  $dbh->do($sql);
  if ($param{p} =~ /all/i) {
    $sql = qq(insert #det select 
	distinct proposal.proposal_id,instrument_name,grating_name
	from proposal, target,instrument,grating where
        proposal.proposal_id = target.proposal_id and
	target.use_grating_id = grating.grating_id and
	target.use_instrument_id = instrument.instrument_id and
	proposal.ao_str = "$param{a}" );
  }
  else {
    $sql = qq(insert #det select 
	distinct proposal.proposal_id,instrument_name,grating_name
	from proposal,panel_proposal,panel,
	target,instrument,grating where
        proposal.proposal_id = panel_proposal.proposal_id and
        proposal.proposal_id = target.proposal_id and
	target.use_grating_id = grating.grating_id and
	target.use_instrument_id = instrument.instrument_id and
        panel_proposal.panel_id = panel.panel_id and
        panel.panel_name = "$param{p}" and
	proposal.ao_str = "$param{a}" );
  }
  #print STDERR "$sql\n";
  $dbh->do($sql);
}
# ----------------------------------------------------------
# perform query
# ----------------------------------------------------------
sub do_query
{
  my($sql,$type) = @_;
  my($sth,@row,$ii,$str);
  my($oldpno,$detector,$curline);

  $oldpno = -1;
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    if ($oldpno == $row[0]) {
      $detector .= "," . $row[3] . "/" . $row[4] ;
    }
    else {
      if ($oldpno != -1) {
        printf OFILE ("%s  %s \n",$curline,$detector);
      }
      $curline = sprintf ("%-8.8s  %-25.25s %-11.11s",@row);
      $detector = $row[3] . "/" . $row[4];
      $oldpno = $row[0];
    }
  }
  if ($oldpno != -1) {
    printf OFILE ("%s  %s \n",$curline,$detector);
  }
}


# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input 
{
  my ($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
             a=> "$ENV{ASCDS_PROP_AO}",
             p=> "all"
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "p=s",
          "q=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if ($err) {
    &usage;
    exit(1);
  }


  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage 
{
    print STDERR "\nUSAGE: prop_detector_for_proposals.pl -Uo [-Sap]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
    print STDERR "       -p panel name\n";
}

