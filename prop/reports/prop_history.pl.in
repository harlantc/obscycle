#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 2019, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_history.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script provides history from database for specified proposal
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw ($dbh %param @reqfiles $reqfile  
	@facility @reqtime @apptime
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}



# -------------------------- MAIN ----------------------------------
{
  my($dsn,$stmp,$idx,$pno);
  my(@hdrs) = ("Proposal","Target","P.I.","Column","Change Date","Old Value","New Value");
  my(@pnos) = ();
  &parse_input;

  push(@pnos,$param{p}) if ($param{p}) ;

  if ($param{i}) {
    open (IFILE,"< $param{i}") or die "Unable to open $param{i} for reading\n";
    while ($stmp = <IFILE>) {
      if ($stmp !~ /^#/) {
        chomp($stmp);
        $stmp =~ s/ //g;
        push(@pnos,$stmp);
      }
    }
  }

  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  open(OFILE,"> $param{o}")  or
    die "Unable to open $param{o} for writing!\n";

  printf OFILE ("%s,%s,\"%s\",%s,\"%s\",\"%s\",\"%s\"\n",@hdrs);

  do_history_ao($param{a}) if ($param{a}); 

  foreach  $pno (@pnos) {
    &do_history_proposal($pno);
  }

  close OFILE;
  chmod 0660,$param{o};
  chgroup($param{o});


}



# ----------------------------------------------------------
# ----------------------------------------------------------
sub do_history_proposal
{
  my($pno) = @_;
  my($sql);
  my($sth,@row,$ii,$str);

  $sql = qq(select proposal_number,history.targid,last,column,change_date,old_value,new_value,ordr
	from view_proposal_cps p,history
	where history.proposal_id = p.proposal_id
	and proposal_number = "$pno"
	order by change_date,column);
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    if ($row[$#row]) {
      $row[1] .= "($row[$#row])";
    }
    printf OFILE ("%s,%s,\"%s\",%s,\"%s\",\"%s\",\"%s\"\n",@row);
  }
}
sub do_history_ao
{
  my($ao) = @_;
  my($sql);
  my($sth,@row,$ii,$str);

  $sql = qq(select proposal_number,history.targid,last,column,change_date,old_value,new_value,ordr
	from view_proposal_cps p,history
	where history.proposal_id = p.proposal_id
	and ao_str = "$ao"
	order by proposal_number,change_date,column);
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    if ($row[$#row]) {
      $row[1] .= "($row[$#row])";
    }
    printf OFILE ("%s,%s,\"%s\",%s,\"%s\",\"%s\",\"%s\"\n",@row);
  }
}


# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input
{
  my ($pwd);
  my $err = 0;
  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "i=s",
          "p=s",
          "q=s",
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter '$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if (!$param{a} && !$param{i} && !$param{p}) {
      warn("parameter a, i or p must be set\n");
      $err++;
  }
  if ($param{a} && ($param{i} || $param{p})) {
      warn("parameter a OR i OR p must be set, not both\n");
      $err++;
  }


  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage
{
    print STDERR "\nUSAGE: prop_history.pl -USo [aip]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -a cycle to search\n"; 
    print STDERR "       -i file containing proposal numbers (1 per line) \n";
    print STDERR "       -p proposal number \n";
}

