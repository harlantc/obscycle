#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_multicycle_checks.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script provides statistics for multicycle_checks proposals going to the
#     peer review (status=PROPOSED).
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw ($dbh %param @reqfiles $reqfile
	$dbg $ao1 $ao2 $ao3 $chdr1 $chdr2 $chdr3
	);

use strict;
use Getopt::Long;
use Time::Local;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}

$dbg = 0;

# -------------------------- MAIN ----------------------------------
{
  my($dsn,$stmp,$idx,$sql,$sth,@row);
  my($yy,$mm,$dd);
  &parse_input;


  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  open(OFILE,"> $param{o}")  ||
    die "Unable to open $param{o} for writing!\n";
  printf OFILE "\nMulticycle Checks for Cycle $param{a}       %s\n\n",get_date();

  if (!$ao1) {
    $sql = qq(select convert(varchar(10),ao_start,102)
		 from ao where ao_str="$param{a}");
    $sth = $dbh->prepare($sql);
    $sth->execute();
    while (@row = $sth->fetchrow_array) {
       ($yy,$mm,$dd) = split('\.',$row[0]);
    }
  
    print STDERR "\nMulticycle check using cycle start time $yy $mm $dd\n\n";
    # structure uses month of 0-11
    $mm -= 1;
    if ($yy && $mm && $dd)  {
      $ao1 = timelocal(0,0,0,$dd,$mm,$yy);
      $ao2 = timelocal(0,0,0,$dd,$mm,$yy+1);
      $ao3 = timelocal(0,0,0,$dd,$mm,$yy+2);
    }
  }

  $idx = 1;
  do_multicycle_monitor($idx++);
  do_multicycle_window($idx++);
  do_multicycle_coordinated($idx++);
  do_multicycle_joint($idx++);
  do_multicycle_grid($idx++);

  close OFILE;
  chmod 0660,$param{o};
  chgroup($param{o});


}



# ----------------------------------------------------------
# ----------------------------------------------------------
sub do_multicycle_monitor
{
  my($idx) = @_;
  my($sql);
  my($sth,@row,$tid,$ii,@curobs);
  my($estc0,$estc1,$estc2,@obstime,@ordr,$tootime);
   

  printf OFILE ("\n\n$idx. Multicycle monitor/followup \n");
  printf OFILE ("   This displays targets where the sum of monitor exposure times\n   do not match on even boundaries with the estimated times per cycle.\n\n");
  printf OFILE ("%-8.8s %-3.3s %-20.20s  %-8.8s  %8.8s  %-8.8s\n",
	"Proposal","Tno","Target Name","Cycle $chdr1","Cycle $chdr2","Cycle $chdr3");
  printf OFILE ("-------------------------------------------------------------------\n");
  $sql = qq(select proposal.proposal_id,target.targid,
        proposal_number,target.targ_num,targname,
	prop_exposure_time,
        est_time_cycle_n1,est_time_cycle_n2, obs_time,ordr,too.time
        from proposal,target,observation,too
        where proposal.proposal_id = target.proposal_id
        and target.targid = observation.targid
        and proposal.ao_str = "$param{a}" 
	and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
	and est_time_cycle_n1 is not null
	and target.targid *= too.targid
        order by proposal_id,targid,ordr
	);

  #print STDERR "$sql\n";

  $tid = 0;
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {

    if ($tid == $row[1]) {
      push (@obstime,$row[8]);
      push (@ordr,$row[9]);
      $tootime = $row[10];
    }
    else {

      if ($tid != 0) {
        if (check_monitors (($estc0-$tootime),$estc1,$estc2,@obstime) != 0) {
          printf OFILE ("%-8.8s %03d %-20.20s  %8.2f  %8.2f  %8.2f\n",
              $curobs[2],$curobs[3],$curobs[4],$estc0,$curobs[6],$curobs[7]);
          if ($tootime > 0) {
            printf OFILE ("%30.30s %2.2d  %8.2f\n","Exposure time observation",0,$tootime);
          }
          for ($ii=0;$ii <=$#obstime;$ii++) {
            printf OFILE ("%30.30s %2.2d  %8.2f\n","Exposure time observation",$ordr[$ii],$obstime[$ii]);
          }      
        }      
      }
      # setup for the next pass
      @curobs = @row;
      $tid = $row[1];
      $estc0 = $row[5] - $row[6] - $row[7];
      $estc1 = $row[6];
      $estc2 = $row[7];
      $tootime = $row[10];
      @obstime = ();
      @ordr = ();
      push (@obstime,$row[8]);
      push (@ordr,$row[9]);
    }
      
  }
  # check last one
  if (check_monitors (($estc0-$tootime),$estc1,$estc2,@obstime) != 0) {
    printf OFILE ("%-8.8s %03d %-20.20s  %8.2f  %8.2f  %8.2f\n",
      $curobs[2],$curobs[3],$curobs[4],$estc0,$curobs[6],$curobs[7]);
    if ($tootime > 0) {
      printf OFILE ("%30.30s %2.2d  %8.2f\n","Exposure time observation",0,$tootime);
    }
    for ($ii=0;$ii <=$#obstime;$ii++) {
      printf OFILE ("%30.30s %2.2d  %8.2f\n","Exposure time observation",$ordr[$ii],$obstime[$ii]);
    }      
  }

}

sub check_monitors 
{
  my ($estc0,$estc1,$estc2,@obstime) = @_;
  my $fup;
  my $retval = 0;

  foreach $fup (@obstime) {
    if ($estc0 > 0) {
      $estc0 -= $fup;
      if ($estc0 < 0) {
          $retval = -1;
      }
    } elsif ($estc1 > 0) {
      $estc1 -= $fup;
      if ($estc1 < 0) {
          $retval = -1;
      }
    } elsif ($estc2 > 0) {
      $estc2 -= $fup;
      if ($estc2 < 0) {
          $retval = -1;
      }
    }
    else {
      $retval = -1;
    }     
  }     
  
  return $retval;
}
        

# ----------------------------------------------------------
sub do_multicycle_joint
{
  my($idx) = @_;
  my($sql,$str);
  my($sth,@row);
   

  printf OFILE ("\n\n$idx. Multicycle Joint Proposals \n");
  printf OFILE ("   This displays all joint+multicycle proposals.\n   CDO needs to check if any joint time is requested in future cycles.\n\n");
  printf OFILE ("%-8.8s %-10.10s  %-20.20s  %s \n", 
	"Proposal","Type","Joint","Requested Joint Time");
  printf OFILE ("-----------------------------------------------------------------\n");
  $sql = qq(select 
        proposal_number,type,joint,
	hst_time,noao_time,xmm_time,rxte_time,spitzer_time,
	nrao_time,suzaku_time,swift_time,nustar_time
        from proposal,joint
        where proposal.proposal_id = joint.proposal_id
        and proposal.ao_str = "$param{a}" 
	and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
	and joint != "None" and 
	(joint not like "%-%" or joint like "%+%")
	and multi_cycle="Y"
        order by proposal_number
	);

  #print STDERR "$sql\n";

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {

    $str = "";
    if ($row[2] =~ /HST/i ) {
      $str .= " hst=$row[3] ";
    }
    if ($row[2] =~ /NOAO/i ) {
      $str .= " noao=$row[4] ";
    }
    if ($row[2] =~ /XMM/i ) {
      $str .= " xmm=$row[5] ";
    }
    if ($row[2] =~ /RXTE/i ) {
      $str .= " rxte=$row[6] ";
    }
    if ($row[2] =~ /Spitzer/i ) {
      $str .= " spitzer=$row[7] ";
    }
    if ($row[2] =~ /NRAO/i ) {
      $str .= " nrao=$row[8] ";
    }
    if ($row[2] =~ /Suzaku/i ) {
      $str .= " suzaku=$row[9] ";
    }
    if ($row[2] =~ /Swift/i ) {
      $str .= " swift=$row[10] ";
    }
    if ($row[2] =~ /NuSTAR/i ) {
      $str .= " nustar=$row[11] ";
    }
    printf OFILE ("%-8.8s %-10.10s  %-20.20s %s\n", 
     $row[0], $row[1], $row[2],$str);
  }   
}   
sub do_multicycle_grid
{
  my($idx) = @_;
  my($sql,$str);
  my($sth,@row);
   

  printf OFILE ("\n\n$idx. Multicycle Grid Proposals \n");
  printf OFILE ("   This displays all grid+multicycle proposals.\n\n");
  printf OFILE ("%-8.8s %-10.10s  %-25.25s\n", 
	"Proposal","Type","P.I.");
  printf OFILE ("---------------------------------------------------------------\n");
  $sql = qq(select  distinct
        proposal_number,type,last
        from proposal,grid,target,axafusers..person_short
        where proposal.proposal_id = target.proposal_id
	and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
        and target.targid = grid.targid
        and proposal.ao_str = "$param{a}" 
	and piid = pers_id
	and multi_cycle="Y"
        order by proposal_number
	);

  #print STDERR "$sql\n";

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
     printf OFILE ("%-8.8s %-10.10s  %s\n",@row);
  }
}

# ----------------------------------------------------------
sub do_multicycle_coordinated
{
  my($idx) = @_;
  my($sql,$str);
  my($sth,@row);
   

  printf OFILE ("\n\n$idx. Multicycle Coordinated Proposals \n");
  printf OFILE ("   This displays all coordinated+multicycle proposals. If approved any\n   coordinated request will be migrated to OCAT.\n   Any required(Y) constraint will be changed to a preference(P).\n\n");
  printf OFILE ("%-8.8s %-3.3s %-25.25s  %s\n",
	"Proposal","Tno","Target Name","Coordinated");
  printf OFILE ("-------------------------------------------------------------------\n");
  $sql = qq(select 
        proposal_number,targ_num,targname,
	multitelescope,multitelescope_interval,observatories
        from proposal,target
        where proposal.proposal_id = target.proposal_id
	and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
        and proposal.ao_str = "$param{a}" 
	and multitelescope is not null 
	and multitelescope != "N"
	and multi_cycle="Y"
        order by proposal_number
	);

  #print STDERR "$sql\n";

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
     printf OFILE ("%-8.8s %03d %-25.25s  %s  %6.2f %s\n",@row);
  }
}

sub do_multicycle_window
{
  my($idx) = @_;
  my($sql);
  my($sth,@row,$tid,$ii,@curobs,@windows);
  my($estc0,$estc1,$estc2,$tstart,$tstop,$ordr,$wflg,$str);
   

  printf OFILE ("\n\n$idx. Multicycle Window Constraints\n");
  printf OFILE ("   This displays multicycle targets with windows and the windows are not\n   distinct to each cycle requesting time.\n\n");

  printf OFILE ("%-8.8s %-3.3s %-20.20s  %-8.8s  %8.8s  %-8.8s\n",
	"Proposal","Tno","Target Name","Cycle $chdr1","Cycle $chdr2","Cycle $chdr3");
  printf OFILE ("-------------------------------------------------------------------\n");
  $sql = qq(select proposal.proposal_id,target.targid,
        proposal_number,target.targ_num,targname,
	prop_exposure_time,
        est_time_cycle_n1,est_time_cycle_n2, 
	ordr,time_constraint,
        convert(varchar(15),tstart,110),
        convert(varchar(15),tstop,110)
        from proposal,target,timereq
        where proposal.proposal_id = target.proposal_id
	and proposal.status not in ("INCOMPLETE","WITHDRAWN") 
        and target.targid = timereq.targid
        and proposal.ao_str = "$param{a}" 
	and (est_time_cycle_n1 is not null or est_time_cycle_n2 is not null)
        order by proposal_id,targid,ordr
	);

  #print STDERR "$sql\n";

  $tid = 0;
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {

    if ($tid == $row[1]) {
      $str = join(' ',$row[8],$row[9],$row[10],$row[11]);
      push (@windows,$str);
    }
    else {
      if ($tid != 0) {

        if (check_windows ($estc0,$estc1,$estc2,@windows) != 0) {
          printf STDERR ("%-8.8s %03d %-20.20s  %8.2f  %8.2f  %8.2f\n\n",
              #$curobs[2],$curobs[3],$curobs[4],$curobs[5],$curobs[6],$curobs[7]);
              $curobs[2],$curobs[3],$curobs[4],$estc0,$curobs[6],$curobs[7]);
          printf OFILE ("%-8.8s %03d %-20.20s  %8.2f  %8.2f  %8.2f\n",
              $curobs[2],$curobs[3],$curobs[4],$estc0,$curobs[6],$curobs[7]);
              #$curobs[2],$curobs[3],$curobs[4],$curobs[5],$curobs[6],$curobs[7]);
          for ($ii=0;$ii <=$#windows;$ii++) {
            printf OFILE ("%20.20s %s\n","Window ",$windows[$ii]);
          }      
        }      
      }
      # setup for the next pass
      @curobs = @row;
      $tid = $row[1];
      $estc0 = $row[5] - $row[6] - $row[7];
      $estc1 = $row[6];
      $estc2 = $row[7];
      @windows = ();
      $str = join(' ',$row[8],$row[9],$row[10],$row[11]);
      push (@windows,$str);
    }
      
  }
  # check last one
  if ($#curobs > 0 && check_windows($estc0,$estc1,$estc2,@windows) != 0) {
    printf STDERR ("%-8.8s %03d %-20.20s  %8.2f  %8.2f  %8.2f\n\n",
      $curobs[2],$curobs[3],$curobs[4],$estc0,$curobs[6],$curobs[7]);
    printf OFILE ("%-8.8s %03d %-20.20s  %8.2f  %8.2f  %8.2f\n",
      $curobs[2],$curobs[3],$curobs[4],$estc0,$curobs[6],$curobs[7]);
    for ($ii=0;$ii <=$#windows;$ii++) {
      printf OFILE ("%20.20s %s\n","Window ",$windows[$ii]);
    }      
  }

}

sub check_windows
{
  my($estc0,$estc1,$estc2,@windows) = @_;
  my($retval) = 0;
  my($str,$yy,$mm,$dd);
  my($c0,$c1,$c2) = 0;
  my(@arr,$tstart,$tstop);
  my($secinyear) =365 * 24* 60 * 60;

  foreach $str (@windows) { 
    @arr = split(' ',$str);
    ($mm,$dd,$yy) = split('-',$arr[2]);
     $mm -= 1;
    $tstart = timelocal(0,0,0,$dd,$mm,$yy);
    ($mm,$dd,$yy) = split('-',$arr[3]);
     $mm -= 1;
    $tstop = timelocal(0,0,0,$dd,$mm,$yy);

    if (($tstart >= $ao1 && $tstart < $ao2) &&
        ($tstop >= $ao1 && $tstop < $ao2) ) {
        $c0 = 1;
        #print STDERR "valid cycle $chdr1 $ao1  $ao2 \n";
    }
    if (($tstart >= $ao2 && $tstart < $ao3) &&
        ($tstop >= $ao2 && $tstop < $ao3) ) {
        $c1 = 1;
        # print STDERR "valid cycle $chdr2 $ao2  $ao3 \n";
    }
    if (($tstart >= $ao3 && $tstart < ($ao3 + $secinyear) ) &&
        ($tstop >= $ao3 && $tstop < ($ao3 + $secinyear)) ) {
        $c2 = 1;
        # print STDERR "valid cycle $chdr3 $ao3  ($ao3+$secinyear) \n";
    }

  }

  if (($estc0 > 0 && !$c0)  ||
      ($estc1 > 0 && !$c1)  ||
      ($estc2 > 0 && !$c2) ) {
    $retval = -1;
    print STDERR "INVALID WINDOW with est.times: $estc0 - $estc1 - $estc2 \n";
    
    if (($estc0 > 0 && !$c0) ) {
         print STDERR " no valid window for cycle $chdr1\n";
    }
    if (($estc1 > 0 && !$c1) ) {
         print STDERR " no valid window for cycle $chdr2\n";
    }
    if (($estc2 > 0 && !$c2) ) {
         print STDERR " no valid window for cycle $chdr3\n";
    }

  }
 
  return $retval;
}

# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input
{
  my ($pwd);
  my $err = 0;
  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
             a=> "$ENV{ASCDS_PROP_AO}",
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "q=s",
          "y=s",
          "m=s",
          "d=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter '$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }


  if ($err) {
    &usage;
    exit(1);
  }


  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

  # backdoor to override AO values from database
  if ($param{y} && $param{m} && $param{d}) {
    print STDERR "\nMulticycle check using cycle start time $param{y} $param{m} $param{d}\n\n";
    $param{m} -= 1;
    $ao1 = timelocal(0,0,0,$param{d},$param{m},$param{y});
    $ao2 = timelocal(0,0,0,$param{d},$param{m},$param{y}+1);
    $ao3 = timelocal(0,0,0,$param{d},$param{m},$param{y}+2);
  }

  $chdr1 = $param{a};
  $chdr2 = $chdr1 + 1;
  $chdr3 = $chdr1 + 2;
}

sub usage
{
    print STDERR "\nUSAGE: prop_multicycle_checks.pl -U -o [ -S -a ]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
}

