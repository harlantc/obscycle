#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_joint_stats.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script provides statistics for joint proposals going to the
#     peer review (status=PROPOSED).
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw ($dbh %param @reqfiles $reqfile  
	@facility @reqtime @apptime
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
        "prop_build_joint.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}



# -------------------------- MAIN ----------------------------------
{
  my($dsn,$stmp,$idx);
  &parse_input;


  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});

  open(OFILE,"> $param{o}")  ||
    die "Unable to open $param{o} for writing!\n";
  printf OFILE "\nJoint Statistics for Cycle $param{a}       %s\n\n",get_date();

  $idx = 1;
  do_joint_by_facility($idx++);
  &do_joint($idx++);
  &do_approved_joint($idx++);

  close OFILE;
  chmod 0660,$param{o};
  chgroup($param{o});


}



# ----------------------------------------------------------
# ----------------------------------------------------------
sub do_joint
{
  my($idx) = @_;
  my($sql);
  my($sth,@row,$ii,$str);

  printf OFILE ("\n\n$idx. Joint Requested Time by Approved Proposals\n\n");

  
  $sql = qq(select count(distinct proposal.proposal_id),);
  for ($ii=0;$ii<= $#reqtime; $ii++) {
    if ($ii > 0) { $sql .= ","; }
    $sql .= "sum("  . $reqtime[$ii] . ")";
  }
  $sql .= qq(
        from proposal,joint
        where proposal.proposal_id = joint.proposal_id
        and proposal.ao_str like "$param{a}" 
	and (proposal.status = "APPROVED" or 
	(proposal.status = "PROPOSED" and rank >= 3.5))
        and joint != "None" and 
	(joint not like "%-%" or joint like "%+%"));
#print STDERR "$sql\n";

  $sth = $dbh->prepare($sql);
  $sth->execute();

  printf OFILE ("%9.9s","#Proposals");
  $str = "---------";
  for ($ii=0;$ii <= $#facility;$ii++) {
    printf OFILE (" %8.8s", $facility[$ii]);
    $str .= "---------";
  }
  printf OFILE ("\n$str\n");
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%9.9s ", $row[0]);
    for ($ii=1;$ii<=$#row;$ii++) {
      printf OFILE ("%8.2f ",$row[$ii]);
    }
    print OFILE "\n";
  }
}
# ----------------------------------------------------------
sub do_approved_joint
{
  my($idx) = @_;
  my($sql);
  my($sth,@row,$ii,$str);

  printf OFILE ("\n\n$idx. Joint Approved Time by Proposal\n\n");
  $sql = qq(select count(distinct proposal.proposal_id),);
  for ($ii=0;$ii<= $#apptime; $ii++) {
    if ($ii > 0) { $sql .= ","; }
    $sql .= "sum("  . $apptime[$ii] . ")";
  }
  $sql .= qq(
	from proposal,joint
        where proposal.proposal_id = joint.proposal_id
        and proposal.ao_str like "$param{a}" 
	and (proposal.status = "APPROVED" or 
	(proposal.status = "PROPOSED" and rank >= 3.5))
        and joint != "None" and 
        (joint not like "%-%" or joint like "%+%"));

#print STDERR "$sql\n";
  $sth = $dbh->prepare($sql);
  $sth->execute();
  printf OFILE ("%9.9s","#Proposals");
  for ($ii=0;$ii <= $#facility;$ii++) {
    printf OFILE (" %8.8s", $facility[$ii]);
    $str .= "---------";
  }
  printf OFILE ("\n$str\n");
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%9.9s ", $row[0]);
    for ($ii=1;$ii<=$#row;$ii++) {
      printf OFILE ("%8.2f ",$row[$ii]);
    }
    print OFILE "\n";
  }
}


sub do_joint_by_facility
{
  my($idx,$jtype) = @_;
  my($sql,$appCnt);
  my($sth,@row,$ii,$str);
    
  printf OFILE ("\n\n$idx. Joint Time By Facility\n\n");
  printf OFILE ("%-10.10s  %9.9s  %8.8s  %9.9s  %8.8s  \n",
   "     ","#Props","#Props","Time","Time");
  printf OFILE ("%-10.10s  %9.9s  %8.8s  %9.9s  %8.8s  \n",
   "Joint","Requested","Approved","Requested","Approved");

  printf OFILE ("----------------------------------------------------------\n");

  for ($ii=0;$ii<=$#facility;$ii++)  {
    $sql = qq(select count(distinct proposal.proposal_id)
	from proposal,joint
        where proposal.proposal_id = joint.proposal_id
        and proposal.ao_str like "$param{a}" and
        joint like "%$facility[$ii]%" and 
        joint not like "CXO-%" and 
	joint not like "%$facility[$ii]-c%"
	and $apptime[$ii] > 0
	and (proposal.status = "APPROVED" or 
	(proposal.status = "PROPOSED" and rank >= 3.5)));
    $sth = $dbh->prepare($sql);
    $sth->execute();
    while (@row = $sth->fetchrow_array) {
      $appCnt = $row[0];
    }

    $sql = qq(select count(distinct proposal.proposal_id),
        sum($reqtime[$ii]),sum($apptime[$ii])
	from proposal,joint
        where proposal.proposal_id = joint.proposal_id and
        proposal.ao_str like "$param{a}" and
        proposal.status not in ("INCOMPLETE","WITHDRAWN") and
        joint like "%$facility[$ii]%" and 
        joint not like "CXO-%"  and
        joint not like "%$facility[$ii]-c%");
    #print STDERR ("$sql\n");
    print_joint("$facility[$ii]",$appCnt,$sql);
  }
}
 
sub print_joint
{
  my($type,$appCnt,$sql) = @_;
  my($sth,@row);
  
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-10.10s  %8d  %8d  %9.2f  %8.2f \n",$type,
	$row[0],$appCnt,$row[1],$row[2]);
  }
}


# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input
{
  my ($pwd);
  my $err = 0;
  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
             a=> "$ENV{ASCDS_PROP_AO}",
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "q=s",
          "all",
          "hst",
          "noao",
          "xmm",
          "nrao",
          "spitzer",
          "suzaku",
          "swift",
          "nustar",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter '$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }


  if ($err) {
    &usage;
    exit(1);
  }

  &build_joint_params;

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage
{
    print STDERR "\nUSAGE: prop_joint_stats.pl -U -o [ -S -a ]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
}

