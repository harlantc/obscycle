#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 2018-2019, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_withdraw_proposal.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script allows CDO to withdraw a proposal.
#     This will set the status to WITHDRAWN, remove it from any panel assignments
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/

BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}


use vars qw( $dbh %param @reqfiles $reqfile
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


# ---------------- MAIN ----------------------------------------------
{
  my($dsn,$sql,$pwd);
  my($sth,$str,@row,$ii,$errmsg);
  my($pno,$pstat,$plast,$ptype,$pname,$panels,$prank);
  my(@props) = ();
  my($hasPanels) = 0;

  $pwd = &parse_input;
  $panels="";

  if ($param{p}) {
    $param{p} =~ s/ //g;
    push(@props,$param{p});
  } else {
    open IFILE,"< $param{f}" or die "Unable to open $param{f} for reading.";
    while ($str = <IFILE>) {
      chomp $str;
      $str =~ s/ //g;
      if ($str !~ /^#/ && length($str) > 2) {
        $pno = int($str);
        push(@props,$str) if ($pno > 0);
      }
    }
    close IFILE;
  }
  if ($param{o}) {
    open STDOUT,">>",$param{o}  or die "Unable to redirect STDOUT to $param{o}";
    open STDERR,">&STDOUT" or die "Can't redirect STDERR";
  }

  $str="\n";
  $dbh = dbProposalConnection($param{U}, $param{S}, $pwd);

  my($pcnt) = 0;
  for ($ii=0;$ii<=$#props;$ii++) {
    $sql = qq(select distinct proposal_number,last,type,status,panel_name,normalized_rank
	from proposal,axafusers..person_short ps,panel,panel_proposal pp 
	where proposal.piid *= ps.pers_id 
	and proposal.proposal_id *= pp.proposal_id
	and pp.panel_id *= panel.panel_id
	and proposal.proposal_number = "$props[$ii]" );
    print STDERR "$props[$ii] -> $sql\n" if ($param{z}) ;

    $sth = $dbh->prepare($sql);
    $sth->execute();
    $pno=0;
    $panels="";
    while ( @row = $sth->fetchrow_array) { 
      ($pno,$plast,$ptype,$pstat,$pname,$prank) = @row;
      $panels .= " " . $pname  if ($pname);
      $plast ="N/A" if (!$plast);
    }
    $sth->finish;
    if (!$pno) {
      print STDOUT "ERROR: proposal $props[$ii] does not exist.\n";
    } elsif ($pstat =~ /APPROV|REJECT/) {
      # don't allow this because you don't want to delete any peer review data
      # if really necessary, just provide sql to David and only update the status.
      print STDOUT "ERROR: Proposal $props[$ii] has a final state of $pstat. \n";
      printf STDOUT ("%s %s %s %s \n",$pno,$plast,$ptype,$pstat);
    } elsif (defined $prank) {
      print STDOUT "ERROR: Proposal $props[$ii] has been ranked at Peer Review. \n";
      printf STDOUT ("%s %s %s %s normalized rank=%d\n",$pno,$plast,$ptype,$pstat,$prank);
    } else {
      $str .= sprintf("%s %s %s %s ",$pno,$plast,$ptype,$pstat);
      if ($panels ne "") {
        $str .=  " Panels: $panels"; 
        $hasPanels=1;
      }
      $str .= "\n";
      $pcnt++;
    }
  }
    
  if ($pcnt > 0 && $pcnt == ($#props+1)) {
    if ($pcnt > 1) {
      $str .= "\nAre you sure you want to withdraw these proposals";
    } else {
      $str .= "\nAre you sure you want to withdraw this proposal";
    }
    $str .= " and remove any panel assignments" if ($hasPanels) ;
    $str .= " ? (Y/N): ";
    if (get_reply($str)) {
      for ($ii=0;$ii<=$#props;$ii++) {
        print STDERR "Proposal $props[$ii] ";
        $sql = qq(exec proposal_withdraw '$props[$ii]');
        print STDERR "$sql\n" if ($param{z});
        $dbh->do($sql) or die "YIKES";
        $sth->finish;
        print STDERR " has been withdrawn.\n";
      }
    } else {
      printf STDERR "Request canceled. No proposals processed.\n";
    }
  } else {
     print STDERR "\n***ERRORS found - NO PROPOSALS processed. Please correct any errors and try again.\n";
  }
}
# -----------------------------------------------------------
# get reply from terminal input.
# return 1 if Yes
# return 0 if No
# -----------------------------------------------------------
sub get_reply
{
  my($msg) =@_;
  my($retval,$tstr);
  use Term::ReadKey;

  if ($param{o}) {
    $retval=1;
    print STDERR "$msg\nUsing file mode\n";
  }
  else {
    $tstr ="";
    while (length($tstr) < 1) {
      print $msg;
      $tstr = ReadLine( 0 );
      chomp $tstr;
      $msg = "Please reply (Y/N): " ;
    }
    if (uc($tstr) ne "Y" ) {
      $retval=0;
    }
    else {
      $retval = 1;
    }
    print STDERR "\n";
  }
  return $retval;
}



# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input 
{
  my($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "f=s",
          "p=s",
          "q=s",
          "o=s",
          "z",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }

  if (!$param{p} && !$param{f}) {
    warn("parameter -f or -p  You must specify either a proposal number of file containing proposal numbers\n");
    $err++;
  }

  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  return $pwd;

}




sub usage 
{
    print STDERR "\nUSAGE: prop_withdraw_proposal.pl -U [pf]  [ -So ]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -p proposal_number \n";
    print STDERR "       -f file of proposal_numbers (1 per line)\n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -o output file\n";
}


