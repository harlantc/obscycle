#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995-2016, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: prop_final_checks.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:
#
#     This script runs a few checks on proposals in the database
#
#
#* NOTES:
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/


BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}


use vars qw( $dbh %param $hidx %panels  @reqfiles $reqfile 
       @facility @reqtime @apptime
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_build_joint.pl",
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


# ---------------- MAIN ----------------------------------------------
{
  my($dsn,$stmp);

  &parse_input;

  
  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});


  #open output file
  open(OFILE,"> $param{o}") || 
	die "ERROR: Unable to open $param{o} for writing.\n";
  print STDERR "Creating file: $param{o}\n";
  printf OFILE "Final Proposal Checks for Cycle $param{a}         %s\n\n",get_date();

  print STDERR "do_panels\n" if $param{d};
  &do_panels();


  print STDERR "do_tgts\n" if $param{d};
  $hidx = 1;
  &do_tgts($hidx);
  $hidx++;

  print STDERR "do_tgt_times\n" if $param{d};
  &do_tgt_times($hidx);
  $hidx++;

  print STDERR "do_tgt_prop\n" if $param{d};
  &do_tgt_prop($hidx);
  $hidx++;

  print STDERR "do_joint\n" if $param{d};
  $hidx = &do_joint($hidx);
  $hidx++;

  print STDERR "do_alts\n" if $param{d};
  &do_alternates($hidx);
  $hidx++;

  do_grids($hidx);
  $hidx++;

  &do_peer($hidx);
  $hidx++;

  &do_final($hidx);
  $hidx++;
   
  close OFILE;
  chmod (0660,$param{o});
}
	
sub do_joint
{
  my($idx) = @_;
  my($sql,$sth,@row);
  my($jfmt,$jffmt);
  my($jj);

  build_joint_params();
  print STDERR "OK : $#facility\n";

  $jfmt = "";
  $jffmt = "";
  for ($jj=0;$jj<=$#facility;$jj++) {
    $jfmt .="%7s ";
    $jffmt.=" %6.2f ";
  }

  print OFILE qq(\n\n\n$idx. Approved Joint time but proposal not APPROVED.\n);
  my($astr) = join(',',@apptime);
  $sql = qq(select proposal_number,NULL,rank,proposal.status,last,type,
	joint ,$astr
	from proposal,axafusers..person_short ps ,joint
	where ao_str = "$param{a}" 
	and proposal.proposal_id = joint.proposal_id 
	and proposal.piid = ps.pers_id 
	and ((status != "APPROVED" and rank is null) or
	(rank is not null and rank < 3.5)) and 
	(hst_approved_time > 0 or xmm_approved_time > 0 or
	spitzer_approved_time > 0 or suzaku_approved_time > 0 or
	swift_approved_time > 0 or
	nustar_approved_time > 0 or
	rxte_approved_time > 0 or 
	noao_approved_time > 0 or nrao_approved_time > 0 ));

  print STDERR "$sql\n" if ($param{d});

  printf OFILE ("\n%-8.8s %-8.8s %-4.4s %-8.8s %-25.25s %-13.13s %-15.15s $jfmt\n",
    	"Proposal","Panel","Rank","Status","Last","Type",
	"Joint",@facility);
  printf OFILE ("------------------------------------------------------------------------------------------");
  my($str);
  foreach $str (@facility) {
     print OFILE "--------";
  } 
  print OFILE "\n";
    

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $row[1] = $panels{$row[0]};
    printf OFILE ("%-8.8s %-8.8s %-4.2f %-8.8s %-25.25s %-13.13s %-15.15s $jffmt\n",@row);
  }

  for($jj=0;$jj<=$#facility;$jj++)  {
    $idx++;
    print OFILE qq(\n\n\n$idx. Approved $facility[$jj] time different from requested.\n);
    printf OFILE ("\n%-8.8s %-8.8s %-8.8s %8s %8s \n",
    	"Proposal","Panel","Joint","ReqTime","AppTime");
    printf OFILE ("-------------------------------------------------\n");
    $sql = qq(select proposal_number,null,"$facility[$jj]",
	$reqtime[$jj],$apptime[$jj]
	from proposal p,joint j
	where p.proposal_id = j.proposal_id
	and ($reqtime[$jj] != $apptime[$jj] or
	($reqtime[$jj] > 0 and $apptime[$jj] is null) or
        ($reqtime[$jj] is null and $apptime[$jj] > 0))
	and rank is not null and rank >= 3.5 and ao_str = "$param{a}");
    print STDERR "$sql\n" if $param{d};
    $sth = $dbh->prepare($sql);
    $sth->execute();
    while (@row = $sth->fetchrow_array) {
      $row[1] = $panels{$row[0]};
      printf OFILE ("%-8.8s %-8.8s %-8.8s %8.2f %8.2f \n",@row);
    }
  }

  return $idx;
}

sub do_peer
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Missing Peer Review.\n);
  $sql = qq(select proposal_number,panel_name,rank,ps.last,type ,
	(ps2.last+ ',' + substring(ps2.first,1,1))
	from proposal,axafusers..person_short ps ,
	axafusers..person_short ps2,proposal_review pr,panel
	where ao_str = "$param{a}" 
        and proposal.piid = ps.pers_id 
        and proposal.proposal_id = pr.proposal_id 
        and pr.panel_id = panel.panel_id 
        and peer_review is null 
        and panel_name not like "%P"
        and primary_reviewer = ps2.pers_id 	
	order by panel_name,proposal_number);
  printf OFILE ("\n%-8.8s %-8.8s %-4.4s %-25.25s %-13.13s %s\n",
    "Proposal","Panel","Rank","Last", "Type", "Primary Reviewer");
  printf OFILE ("--------------------------------------------------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-8.8s %-8.8s %4.2f %-25.25s %-13.13s %s\n", @row);
  }
}
sub do_final
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Missing Final Review.\n);
  $sql = qq(select proposal_number,"BPP" panel_name,rank,ps.last,type ,
        " "
	from proposal,axafusers..person_short ps 
	where ao_str = "$param{a}" 
        and proposal.piid = ps.pers_id
        and type like "%P"
	and (proposal.status = "PROPOSED" or rank is not null)
        and proposal.proposal_id not in (select fr.proposal_id 
            from final_review fr,proposal p2 
            where p2.proposal_id=fr.proposal_id and p2.ao_str="$param{a}")
	order by panel_name,proposal_number);
  printf OFILE ("\n%-8.8s %-8.8s %-4.4s %-25.25s %-13.13s \n",
    "Proposal","Panel","Rank","Last", "Type");
  printf OFILE ("---------------------------------------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    printf OFILE ("%-8.8s %-8.8s %4.2f %-25.25s %-13.13s \n", @row);
  }
}

sub do_tgts
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Accepted targets but proposal is not APPROVED.\n);
  $sql = qq(select proposal_number,NULL,rank,last,type,
	prop_exposure_time, approved_exposure_time ,targname
	from proposal,target,axafusers..person_short ps 
	where ao_str = "$param{a}" and 
        proposal.proposal_id = target.proposal_id and
        proposal.piid = ps.pers_id and
	((proposal.status != "APPROVED" and rank is null) or
	(rank is not null and rank < 3.5)) and 
	target.status = "accepted");

  print STDERR "$sql\n" if ($param{d});

  printf OFILE ("\n%-8.8s %-8.8s %-4.4s %-25.25s %-13.13s %-8.8s %-8.8s %-s\n",
    "Proposal","Panel","Rank","Last", "Type","Req.Time","App.Time","Target Name");
  printf OFILE ("----------------------------------------------------------------------------------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $row[1] = $panels{$row[0]};
    printf OFILE ("%-8.8s %-8.8s %4.2f %-25.25s %-13.13s %8.2f %8.2f %s\n", @row);
  }
}
sub do_tgt_prop
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Not all targets accepted for proposal.\n);
  $dbh->do("create table #dtest (pid int, cnt int)");
  $sql = qq(insert #dtest
	select p.proposal_id,count(distinct targid)
	from proposal p, target t
	where p.proposal_id = t.proposal_id
	and t.status ="accepted"
	and rank is not null and rank >= 3.5 and ao_str = "$param{a}"
	group by p.proposal_id);
  $dbh->do($sql);
  $sql = qq( select proposal_number,null,num_targets,cnt 
	from proposal,#dtest
	where proposal.proposal_id = pid
	and num_targets != cnt
	order by proposal_number);
  print STDERR "$sql\n" if ($param{d});

  printf OFILE ("\n%-8.8s %-8.8s %-8.8s %-8.8s \n",
    "Proposal","Panel","Req.Tgts","App.Tgts");
  printf OFILE ("-----------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $row[1] = $panels{$row[0]};
    printf OFILE ("%-8.8s %-8.8s %8d %8d \n",@row);
  }

  $dbh->do("drop table #dtest");
}



sub do_tgt_times
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Approved time for target different than requested time.\n);
  $sql = qq(select proposal_number,NULL,rank,last,type,
	prop_exposure_time, approved_exposure_time ,targname
	from proposal,target,axafusers..person_short ps 
	where ao_str = "$param{a}" 
	and proposal.proposal_id = target.proposal_id 
	and proposal.piid = ps.pers_id 
	and rank is not null and rank >= 3.5 
	and target.status = "accepted"
	and prop_exposure_time != approved_exposure_time
	order by proposal_number,targ_num);


  print STDERR "$sql\n" if ($param{d});

  printf OFILE ("\n%-8.8s %-8.8s %-4.4s %-25.25s %-13.13s %-8.8s %-8.8s %-s\n",
    "Proposal","Panel","Rank","Last", "Type","Req.Time","App.Time","Target Name");
  printf OFILE ("----------------------------------------------------------------------------------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $row[1] = $panels{$row[0]};
    printf OFILE ("%-8.8s %-8.8s %4.2f %-25.25s %-13.13s %8.2f %8.2f %s\n", @row);
  }
}

sub do_alternates
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Approved alternate target count for proposal different than requested.\n);
  $sql = qq(select proposal_number,null,group_name,
	requested_count,approved_count
	from proposal,alternate_target_group
	where proposal.proposal_id = alternate_target_group.proposal_id
	and approved_count > 0
	and approved_count != requested_count
	and rank is not null and rank >= 3.5 and ao_str = "$param{a}"
        order by proposal_number);

  print STDERR "$sql\n" if ($param{d});

  printf OFILE ("\n%-8.8s %-8.8s %-25.25s %-8.8s %-8.8s \n",
    "Proposal","Panel","Group","ReqCount","AppCount");
  printf OFILE ("---------------------------------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $row[1] = $panels{$row[0]};
    printf OFILE ("%-8.8s %-8.8s %-25.25s %8d %8d \n",@row);
  }
}

sub do_grids
{
  my($idx) = @_;
  my($sql,$sth,@row);

  print OFILE qq(\n\n\n$idx. Approved grid count for proposal different than requested.\n);
  $sql = qq(select proposal_number,null,grid_name,
	num_pointings,approved_num_pointings
	from proposal,grid,target
	where proposal.proposal_id = target.proposal_id
	and target.targid = grid.targid
	and target.status = "accepted"
	and approved_num_pointings > 0
	and approved_num_pointings != num_pointings
	and rank is not null and rank >= 3.5 and ao_str = "$param{a}"
        order by proposal_number);

  print STDERR "$sql\n" if ($param{d});

  printf OFILE ("\n%-8.8s %-8.8s %-25.25s %-8.8s %-8.8s \n",
    "Proposal","Panel","Grid","ReqCount","AppCount");
  printf OFILE ("---------------------------------------------------------------\n");

  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
    $row[1] = $panels{$row[0]};
    printf OFILE ("%-8.8s %-8.8s %-25.25s %8d %8d \n",@row);
  }
}



sub do_panels
{
  my($sql,$sth,@row,$ii,$str);
  $sql = qq(select distinct proposal_number,panel_name
        from proposal,panel_proposal,panel where
        proposal.proposal_id = panel_proposal.proposal_id 
	and panel_proposal.panel_id = panel.panel_id 
	and proposal.ao_str = "$param{a}" 
        order by proposal_number);
  $sth = $dbh->prepare($sql);
  $sth->execute();
  while (@row = $sth->fetchrow_array) {
      $str = $panels{$row[0]};
      if ($str) { $str .= ','; }
      $str .= $row[1];
      $panels{$row[0]} = $str;
  }
}

# ----------------------------------------------------------
# parse input parameters
# ----------------------------------------------------------
sub parse_input 
{
  my($pwd);
  my $err = 0;

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             o=> undef,
             a=> "$ENV{ASCDS_PROP_AO}",
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "o=s",
          "a=s",
          "q=s",
          "d",
          "all",
          "hst",
          "noao",
          "xmm",
          "nrao",
          "spitzer",
          "suzaku",
          "swift",
          "nustar",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }


  if ($err) {
    &usage;
    exit(1);
  }


  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}

sub usage 
{
    print STDERR "\nUSAGE: prop_final_checks.pl -U -o [ -S -a ]\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -o output filename \n";
    print STDERR "       -S database server, default is DB_PROP_SQLSRV\n";
    print STDERR "       -a AO , default is ASCDS_PROP_AO\n";
}

