#!@PERLDB@ 
#*H****************************************************************************
#* Copyright (c) 1995, Smithsonian Astrophysical Observatory
#  You may do anything you like with this file except remove this
#  copyright.
#
#* FILE NAME: parse_single_conflict_files.pl
#
#* DEVELOPMENT: ObsCycle
#
#* DESCRIPTION:  This script retrieves all proposals or only those 
#	for a specified panel and then writes the full conflicts from 
#	the propconflict output for each proposal into individual files.
#
#
#* NOTES:   
#
#
#
#        <None>
#
#* REVISION HISTORY:
#
#
#H****************************************************************************/
BEGIN
{
    $ENV{SYBASE} = "@SYBASE_DEFAULT@";
}

use vars qw($dbh  %param @proposals  $estring $sstring  @reqfiles $reqfile
	);

use strict;
use Getopt::Long;
use DBI;
use lib $ENV{'ASCDS_BIN'};

@reqfiles = (
        "prop_routines.pl",
);
foreach $reqfile (@reqfiles) {
  unless (eval {require $reqfile}) {
    print "Unable to find $reqfile\n"; exit(1);
  }
}


{
  my($dsn,$stmp,$ii);
  my($fname,$propno );

  &parse_input;

  #database connection
  $dbh = dbProposalConnection($param{U}, $param{S}, $param{q});


  # this will pick up all conflict info for a proposal
  # If you only want part of the conflicts, change these strings.
  $sstring = "CONFLICTS FOR PROPOSAL";
  $estring = "CONFLICTS FOR PROPOSAL";

  #get all proposals/panel name/pi
  &do_proposals($param{p});

  if ($param{p}) {
    $fname = "$param{o}/panel$param{p}.conflicts";
    open (OFILE,"> $fname") || die "Unable to open file $fname\n";
    print STDERR "\nOutput written to  $fname\n";
  }

  for($ii=0;$ii<=$#proposals;$ii++) {
    $propno = $proposals[$ii];
    if (!$param{p}) {
      $fname = "$param{o}/$propno.conflicts";
      open (OFILE,"> $fname") || die "Unable to open file $fname\n";
    }
    &get_conflicts($propno);
    if (!$param{p}) {
       close OFILE;
       chmod (0660,$fname);
    }
  }

  if ($param{p}) {
    close OFILE;
    chmod (0660,$fname);
  }
  
}



#-----------------------------------------------------------------
# find conflicts for specified proposal number
#-----------------------------------------------------------------
sub get_conflicts
{
  my($propno) = @_;
  my($gotit);
  my($myline);

  $gotit = 0;


  open (INFILE,"< $param{i}") || die "Unable to open file $param{i}\n";
  while ($myline =  <INFILE> ) {
    if ($myline =~ /$estring/ &&
        $gotit == 1) {
         print STDERR " finished $propno\n";
         last;
    }
    elsif ($myline =~ /$sstring/ &&
           $myline =~ /$propno/) {
      print STDERR "starting $propno ...";
      print OFILE $myline;
      $gotit = 1;
    }
    elsif ($gotit == 1) {
      chomp($myline);
      #if ($myline =~ /CALIBRATION,/i && $myline =~ /\/NONE/) {
        #do nothing
        #print STDERR "skippin $myline";
        #<INFILE>;
     # } else {
        print OFILE "$myline\n";
      #}
    }
    
  }
  close INFILE;
}

#--------------------------------------------------------------
# retrieve proposal numbers
#--------------------------------------------------------------
sub do_proposals
{    
  my($pname) = @_;
  my($sth,$stmp,@row);

  @proposals = ();
  $stmp = qq( select distinct proposal_number
	from proposal,panel,panel_proposal,context,axafusers..person_short
   	where proposal.proposal_id = panel_proposal.proposal_id and
   	proposal.piid = axafusers..person_short.pers_id  and
	panel_proposal.panel_id = panel.panel_id and
        proposal.status = "PROPOSED" and
   	proposal.ao_str = context.current_ao_str);	
  if ($pname) {
     if ($pname =~ /LP/i || $pname =~ /BPP/i) {
       $stmp .= qq( and (type like "%LP%" or type like "%XVP%"));
     }
     else {
       $stmp .= qq( and panel_name = "$pname");
     }
  }
  $sth = $dbh->prepare($stmp);
  $sth->execute();
  while((@row) = $sth->fetchrow_array()) {
    push(@proposals,$row[0]);
  }
    
}

sub parse_input
{
  my($err,$pwd);

  %param = (
             U=> undef,
             S=> "$ENV{DB_PROP_SQLSRV}",
             i=> undef,
             o=> "."
        );

  GetOptions( \%param,
          "U=s",
          "S=s",
          "i=s",
          "o=s",
          "p=s",
          "q=s",
          "h"
        ) or exit (1);

  if (!$param{h} ) {
    while ( my ( $par, $val ) = each ( %param ) ) {
      next if defined $val && $val ne "";
      warn("parameter `$par' not set\n");
      $err++;
    }
  }
  else {
    &usage;
    exit(0);
  }


  if ($err) {
    &usage;
    exit(1);
  }

  if(!$param{q}) {
    $pwd = get_password($param{U},$param{S});
  }
  else {
    $pwd = read_password($param{q});
  }
  $param{q} = $pwd;

}


sub usage
{
    print STDERR "\nUSAGE: parse_single_conflict_files.pl -Ui [ Sop ]\n";
    print STDERR "\n  This scripts creates a separate file for each proposal conflict\n  in the input file.\n\n";
    print STDERR "       -U database user name\n";
    print STDERR "       -S database SQL server\n";
    print STDERR "       -i full conflict filename (cycle6_15_all.conflicts)\n";
    print STDERR "       -o output directory \n";
    print STDERR "       -p panel name (Default is all proposals)\n";
}
